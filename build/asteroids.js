/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hammerjs/hammer.js":
/*!*****************************************!*\
  !*** ./node_modules/hammerjs/hammer.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return Hammer;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n\n})(window, document, 'Hammer');\n\n\n//# sourceURL=webpack://asteroids/./node_modules/hammerjs/hammer.js?");

/***/ }),

/***/ "./node_modules/howler/dist/howler.js":
/*!********************************************!*\
  !*** ./node_modules/howler/dist/howler.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof __webpack_require__.g !== 'undefined') {\n    __webpack_require__.g.HowlerGlobal = HowlerGlobal;\n    __webpack_require__.g.Howler = Howler;\n    __webpack_require__.g.Howl = Howl;\n    __webpack_require__.g.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n//# sourceURL=webpack://asteroids/./node_modules/howler/dist/howler.js?");

/***/ }),

/***/ "./src/alien.ts":
/*!**********************!*\
  !*** ./src/alien.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SmallAlien = exports.BigAlien = exports.Alien = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar object2d_1 = __webpack_require__(/*! ./object2d */ \"./src/object2d.ts\");\r\nvar bullet_1 = __webpack_require__(/*! ./bullet */ \"./src/bullet.ts\");\r\nvar vector_1 = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\r\nvar BIG_ALIEN_BULLET_SPEED = 600 * screen_1.default.objectScale;\r\nvar SMALL_ALIEN_BULLET_SPEED = 800 * screen_1.default.objectScale;\r\nvar BIG_ALIEN_SPEED = 225 * screen_1.default.objectScale;\r\nvar SMALL_ALIEN_SPEED = 250 * screen_1.default.objectScale;\r\nvar Alien = (function (_super) {\r\n    __extends(Alien, _super);\r\n    function Alien(speed) {\r\n        var _this = _super.call(this, 0, 0) || this;\r\n        _this.moveTimer = 0;\r\n        _this.moveTime = 1;\r\n        _this.bulletTimer = 0;\r\n        _this.bulletTime = .7;\r\n        _this.velocity.y = 0;\r\n        _this.origin.y = (0, util_1.random)(100, screen_1.default.height - 100);\r\n        if (_this.origin.y % 2 === 0) {\r\n            _this.origin.x = 40;\r\n            _this.velocity.x = speed;\r\n        }\r\n        else {\r\n            _this.origin.x = screen_1.default.width - 40;\r\n            _this.velocity.x = -speed;\r\n        }\r\n        _this.points = [\r\n            { x: .5, y: -2 },\r\n            { x: 1, y: -1 },\r\n            { x: 2.5, y: 0 },\r\n            { x: 1, y: 1 },\r\n            { x: -1, y: 1 },\r\n            { x: -2.5, y: 0 },\r\n            { x: -1, y: -1 },\r\n            { x: -.5, y: -2 }\r\n        ];\r\n        return _this;\r\n    }\r\n    Alien.prototype.update = function (dt) {\r\n        this.move(dt);\r\n        if (this.origin.x >= screen_1.default.width - 5 || this.origin.x <= 5) {\r\n            this.trigger('expired');\r\n            return;\r\n        }\r\n        this.moveTimer += dt;\r\n        if (this.moveTimer >= 1 && this.velocity.y !== 0) {\r\n            this.velocity.y = 0;\r\n            this.moveTimer = 0;\r\n        }\r\n        if (this.moveTimer >= this.moveTime) {\r\n            var move = (0, util_1.random)(1, 20) % 2 === 0;\r\n            if (move) {\r\n                this.velocity.y = this.origin.x % 2 === 0 ? this.velocity.x : -this.velocity.x;\r\n            }\r\n            this.moveTimer = 0;\r\n        }\r\n        this.bulletTimer += dt;\r\n        if (this.bulletTimer >= this.bulletTime) {\r\n            this.fire();\r\n            this.bulletTimer = 0;\r\n        }\r\n    };\r\n    Alien.prototype.render = function () {\r\n        this.draw();\r\n    };\r\n    Alien.prototype.draw = function () {\r\n        _super.prototype.draw.call(this);\r\n        screen_1.default.draw.vectorShape([this.points[1], this.points[6]], this.origin.x, this.origin.y);\r\n        screen_1.default.draw.vectorShape([this.points[2], this.points[5]], this.origin.x, this.origin.y);\r\n    };\r\n    return Alien;\r\n}(object2d_1.Object2D));\r\nexports.Alien = Alien;\r\nvar BigAlien = (function (_super) {\r\n    __extends(BigAlien, _super);\r\n    function BigAlien() {\r\n        var _this = _super.call(this, BIG_ALIEN_SPEED) || this;\r\n        _this.score = 200;\r\n        _this.scale(7);\r\n        return _this;\r\n    }\r\n    BigAlien.prototype.fire = function () {\r\n        var v = vector_1.Vector.fromAngle((0, util_1.random)(1, 360), BIG_ALIEN_BULLET_SPEED);\r\n        var bullet = new bullet_1.Bullet(this.origin, v);\r\n        this.trigger('fire', bullet);\r\n    };\r\n    BigAlien.prototype.destroy = function () {\r\n        this.trigger('expired');\r\n    };\r\n    return BigAlien;\r\n}(Alien));\r\nexports.BigAlien = BigAlien;\r\nvar SmallAlien = (function (_super) {\r\n    __extends(SmallAlien, _super);\r\n    function SmallAlien(ship) {\r\n        var _this = _super.call(this, SMALL_ALIEN_SPEED) || this;\r\n        _this.ship = ship;\r\n        _this.bulletTime = 1;\r\n        _this.score = 1000;\r\n        _this.scale(4);\r\n        return _this;\r\n    }\r\n    SmallAlien.prototype.fire = function () {\r\n        var bullet;\r\n        if (this.ship) {\r\n            var v = vector_1.Vector.fromXY(this.ship.origin, this.origin, SMALL_ALIEN_BULLET_SPEED);\r\n            bullet = new bullet_1.Bullet(this.origin, v, 2);\r\n        }\r\n        else {\r\n            var v = vector_1.Vector.fromAngle((0, util_1.random)(1, 360), SMALL_ALIEN_BULLET_SPEED);\r\n            bullet = new bullet_1.Bullet(this.origin, v, 2);\r\n        }\r\n        this.trigger('fire', bullet);\r\n    };\r\n    SmallAlien.prototype.destroy = function () {\r\n        this.ship = null;\r\n        this.trigger('expired');\r\n    };\r\n    return SmallAlien;\r\n}(Alien));\r\nexports.SmallAlien = SmallAlien;\r\n\n\n//# sourceURL=webpack://asteroids/./src/alien.ts?");

/***/ }),

/***/ "./src/asteroids.ts":
/*!**************************!*\
  !*** ./src/asteroids.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Asteroids = void 0;\r\nvar loop_1 = __webpack_require__(/*! ./loop */ \"./src/loop.ts\");\r\nvar keys_1 = __webpack_require__(/*! ./keys */ \"./src/keys.ts\");\r\nvar world_1 = __webpack_require__(/*! ./world */ \"./src/world.ts\");\r\nvar sounds_1 = __webpack_require__(/*! ./sounds */ \"./src/sounds.ts\");\r\nvar highscores_1 = __webpack_require__(/*! ./highscores */ \"./src/highscores.ts\");\r\nvar highScoreMode_1 = __webpack_require__(/*! ./highScoreMode */ \"./src/highScoreMode.ts\");\r\nvar initialsMode_1 = __webpack_require__(/*! ./initialsMode */ \"./src/initialsMode.ts\");\r\nvar attractMode_1 = __webpack_require__(/*! ./attractMode */ \"./src/attractMode.ts\");\r\nvar gameMode_1 = __webpack_require__(/*! ./gameMode */ \"./src/gameMode.ts\");\r\nvar global_1 = __webpack_require__(/*! ./global */ \"./src/global.ts\");\r\nvar ATTRACT_TIME = 15;\r\nvar Modes;\r\n(function (Modes) {\r\n    Modes[Modes[\"Attract\"] = 0] = \"Attract\";\r\n    Modes[Modes[\"Game\"] = 1] = \"Game\";\r\n    Modes[Modes[\"Initials\"] = 2] = \"Initials\";\r\n    Modes[Modes[\"Start\"] = 3] = \"Start\";\r\n})(Modes || (Modes = {}));\r\nvar Asteroids = (function () {\r\n    function Asteroids() {\r\n        this.lastScore = 0;\r\n        this.init();\r\n    }\r\n    Asteroids.prototype.init = function (world) {\r\n        var _this = this;\r\n        sounds_1.Sound.stop();\r\n        sounds_1.Sound.off();\r\n        this.mode = Modes.Start;\r\n        this.highScoreMode = new highScoreMode_1.HighScoreMode(this.lastScore);\r\n        this.attractMode = new attractMode_1.AttractMode(world || new world_1.World(highscores_1.highscores.top.score));\r\n        this.gameMode = new gameMode_1.GameMode(new world_1.World(highscores_1.highscores.top.score));\r\n        this.attractTimer = 0;\r\n        this.gameMode.on('done', function (source, world) {\r\n            _this.lastScore = world.score;\r\n            if (highscores_1.highscores.qualifies(world.score)) {\r\n                _this.initialsMode = new initialsMode_1.InitialsMode(world.score);\r\n                _this.initialsMode.on('done', function () {\r\n                    _this.init(world);\r\n                });\r\n                sounds_1.Sound.stop();\r\n                sounds_1.Sound.off();\r\n                _this.mode = Modes.Initials;\r\n            }\r\n            else {\r\n                _this.init(world);\r\n            }\r\n        });\r\n        this.attractStarted = false;\r\n    };\r\n    Asteroids.prototype.update = function (dt) {\r\n        if (keys_1.Key.isPressed(keys_1.Keys.GOD)) {\r\n            global_1.default.god = !global_1.default.god;\r\n        }\r\n        if (keys_1.Key.isPressed(keys_1.Keys.DEBUG)) {\r\n            global_1.default.debug = !global_1.default.debug;\r\n        }\r\n        if (keys_1.Key.isPressed(keys_1.Keys.MONITOR_BURN)) {\r\n            global_1.default.burn = !global_1.default.burn;\r\n        }\r\n        if (keys_1.Key.isPressed(keys_1.Keys.PAUSE)) {\r\n            global_1.default.paused = !global_1.default.paused;\r\n            if (global_1.default.paused) {\r\n                sounds_1.Sound.off();\r\n            }\r\n            else {\r\n                sounds_1.Sound.on();\r\n            }\r\n        }\r\n        if (global_1.default.paused) {\r\n            return;\r\n        }\r\n        switch (this.mode) {\r\n            case Modes.Start:\r\n                this.highScoreMode.update(dt);\r\n                if (this.attractStarted) {\r\n                    this.attractMode.update(dt);\r\n                }\r\n                if (keys_1.Key.isAnyPressed()) {\r\n                    sounds_1.Sound.on();\r\n                    this.mode = Modes.Game;\r\n                }\r\n                else {\r\n                    this.updateAttractTimer(dt);\r\n                }\r\n                break;\r\n            case Modes.Attract:\r\n                this.attractMode.update(dt);\r\n                if (keys_1.Key.isAnyPressed()) {\r\n                    sounds_1.Sound.on();\r\n                    this.mode = Modes.Game;\r\n                }\r\n                else {\r\n                    this.updateAttractTimer(dt);\r\n                }\r\n                break;\r\n            case Modes.Initials:\r\n                this.initialsMode.update(dt);\r\n                break;\r\n            case Modes.Game:\r\n                this.gameMode.update(dt);\r\n                break;\r\n        }\r\n    };\r\n    Asteroids.prototype.render = function (dt) {\r\n        switch (this.mode) {\r\n            case Modes.Start:\r\n                this.highScoreMode.render(dt);\r\n                break;\r\n            case Modes.Attract:\r\n                this.attractMode.render(dt);\r\n                break;\r\n            case Modes.Initials:\r\n                this.initialsMode.render(dt);\r\n                break;\r\n            case Modes.Game:\r\n                this.gameMode.render(dt);\r\n                break;\r\n        }\r\n        keys_1.Key.update();\r\n    };\r\n    Asteroids.prototype.updateAttractTimer = function (dt) {\r\n        this.attractTimer += dt;\r\n        if (this.attractTimer >= ATTRACT_TIME) {\r\n            this.attractTimer = 0;\r\n            this.mode = this.mode === Modes.Attract ? Modes.Start : Modes.Attract;\r\n        }\r\n    };\r\n    return Asteroids;\r\n}());\r\nexports.Asteroids = Asteroids;\r\nvar game = new Asteroids();\r\nsetTimeout(function () {\r\n    (0, loop_1.loop)(game);\r\n}, 1000);\r\n\n\n//# sourceURL=webpack://asteroids/./src/asteroids.ts?");

/***/ }),

/***/ "./src/attractMode.ts":
/*!****************************!*\
  !*** ./src/attractMode.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AttractMode = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar collisions_1 = __webpack_require__(/*! ./collisions */ \"./src/collisions.ts\");\r\nvar AttractMode = (function () {\r\n    function AttractMode(world) {\r\n        this.world = world;\r\n        this.showPushStart = true;\r\n        this.pushStartTimer = 0;\r\n        this.init();\r\n    }\r\n    AttractMode.prototype.init = function () {\r\n        if (!this.world.started) {\r\n            this.world.startLevel();\r\n        }\r\n    };\r\n    AttractMode.prototype.update = function (dt) {\r\n        this.checkCollisions();\r\n        this.world.updateAlienTimer(dt);\r\n        if (!this.world.rocks.length && !this.world.scenery.length && !this.world.alien) {\r\n            this.world.startLevel();\r\n        }\r\n        this.updatePushStartTimer(dt);\r\n        this.world.update(dt);\r\n    };\r\n    AttractMode.prototype.updatePushStartTimer = function (dt) {\r\n        this.pushStartTimer += dt;\r\n        if (this.pushStartTimer >= .4) {\r\n            this.pushStartTimer = 0;\r\n            this.showPushStart = !this.showPushStart;\r\n        }\r\n    };\r\n    AttractMode.prototype.checkCollisions = function () {\r\n        var _this = this;\r\n        var _a = this.world, alien = _a.alien, rocks = _a.rocks, alienBullets = _a.alienBullets;\r\n        var check = !!alien || !!alienBullets.length;\r\n        if (!check) {\r\n            return;\r\n        }\r\n        var collisions = new collisions_1.Collisions();\r\n        collisions.check([alien], rocks, false, function (alien, rock) {\r\n            _this.world.shake();\r\n            _this.world.alienDestroyed();\r\n            _this.world.rockDestroyed(rock);\r\n        });\r\n        collisions.check(alienBullets, rocks, false, function (bullet, rock) {\r\n            _this.world.shake();\r\n            _this.world.rockDestroyed(rock);\r\n        });\r\n    };\r\n    AttractMode.prototype.render = function (delta) {\r\n        this.drawBackground();\r\n        this.drawPushStart();\r\n        this.world.render(delta);\r\n    };\r\n    AttractMode.prototype.drawBackground = function () {\r\n        screen_1.default.draw.background();\r\n        screen_1.default.draw.scorePlayer1(this.world.score);\r\n        screen_1.default.draw.oneCoinOnePlay();\r\n        screen_1.default.draw.highscore(this.world.highscore);\r\n        screen_1.default.draw.copyright();\r\n    };\r\n    AttractMode.prototype.drawPushStart = function () {\r\n        if (this.showPushStart) {\r\n            screen_1.default.draw.pushStart();\r\n        }\r\n    };\r\n    return AttractMode;\r\n}());\r\nexports.AttractMode = AttractMode;\r\n\n\n//# sourceURL=webpack://asteroids/./src/attractMode.ts?");

/***/ }),

/***/ "./src/bullet.ts":
/*!***********************!*\
  !*** ./src/bullet.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Bullet = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar object2d_1 = __webpack_require__(/*! ./object2d */ \"./src/object2d.ts\");\r\nvar Bullet = (function (_super) {\r\n    __extends(Bullet, _super);\r\n    function Bullet(origin, v, life) {\r\n        if (life === void 0) { life = 1.25; }\r\n        var _this = _super.call(this, origin.x, origin.y) || this;\r\n        _this.life = life;\r\n        _this.frame = 0;\r\n        _this.velocity = v;\r\n        return _this;\r\n    }\r\n    Bullet.prototype.render = function () {\r\n        this.draw();\r\n    };\r\n    Bullet.prototype.update = function (dt) {\r\n        this.frame++;\r\n        this.move(dt);\r\n        this.life -= dt;\r\n        if (this.life <= 0) {\r\n            this.destroy();\r\n        }\r\n    };\r\n    Bullet.prototype.draw = function () {\r\n        var size = this.frame <= 1 ? 8 * screen_1.default.objectScale : 4 * screen_1.default.objectScale;\r\n        screen_1.default.draw.rect(this.origin.x - 2, this.origin.y - 2, size, size, \"rgba(255,0,255,.5)\");\r\n        screen_1.default.draw.rect(this.origin.x - 1, this.origin.y - 1, size, size, \"rgba(0,255,255,.5)\");\r\n        screen_1.default.draw.rect(this.origin.x, this.origin.y, size, size);\r\n    };\r\n    Bullet.prototype.destroy = function () {\r\n        this.trigger('expired');\r\n    };\r\n    Object.defineProperty(Bullet.prototype, \"vertices\", {\r\n        get: function () {\r\n            return [this.origin];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Bullet;\r\n}(object2d_1.Object2D));\r\nexports.Bullet = Bullet;\r\n\n\n//# sourceURL=webpack://asteroids/./src/bullet.ts?");

/***/ }),

/***/ "./src/collisions.ts":
/*!***************************!*\
  !*** ./src/collisions.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Collisions = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar quadtree_1 = __webpack_require__(/*! ./quadtree */ \"./src/quadtree.ts\");\r\nvar lineclip_1 = __webpack_require__(/*! ./lineclip */ \"./src/lineclip.ts\");\r\nvar Collisions = (function () {\r\n    function Collisions() {\r\n        this.tree = new quadtree_1.Quadtree({\r\n            x: 0,\r\n            y: 0,\r\n            width: screen_1.default.width,\r\n            height: screen_1.default.height\r\n        }, 1);\r\n    }\r\n    Collisions.prototype.bulletCheck = function (bullets, targets, cb, dcb) {\r\n        var _this = this;\r\n        if (!bullets || !bullets.length || !targets || !targets.length) {\r\n            return;\r\n        }\r\n        var candidates = [];\r\n        var results = [];\r\n        this.tree.clear();\r\n        targets.forEach(function (target) {\r\n            _this.tree.insert(target);\r\n        });\r\n        var _loop_1 = function (i) {\r\n            var bullet1 = bullets[i];\r\n            candidates.length = 0;\r\n            candidates.push.apply(candidates, this_1.tree.retrieve(bullet1));\r\n            candidates.forEach(function (candidate) {\r\n                if (candidate.collided(bullet1)) {\r\n                    cb(bullet1, candidate);\r\n                    return;\r\n                }\r\n                else if (dcb) {\r\n                    dcb(bullet1, bullet1, candidate);\r\n                }\r\n                if (i < bullets.length - 1) {\r\n                    var bullet2 = bullets[i + 1];\r\n                    var bbox = [candidate.x, candidate.y, candidate.x + candidate.width, candidate.y + candidate.height];\r\n                    results.length = 0;\r\n                    (0, lineclip_1.lineclip)([[bullet1.origin.x, bullet1.origin.y], [bullet2.origin.x, bullet2.origin.y]], bbox, results);\r\n                    if (results.length) {\r\n                        if (dcb) {\r\n                            dcb(bullet1, bullet2, candidate);\r\n                        }\r\n                        cb(bullet1, candidate);\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < bullets.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    Collisions.prototype.check = function (sources, targets, deep, cb, dcb) {\r\n        var _this = this;\r\n        if (!sources || !sources.length || !targets || !targets.length) {\r\n            return;\r\n        }\r\n        var candidates = [];\r\n        this.tree.clear();\r\n        targets.forEach(function (target) {\r\n            _this.tree.insert(target);\r\n        });\r\n        sources.forEach(function (source) {\r\n            candidates.length = 0;\r\n            candidates.push.apply(candidates, _this.tree.retrieve(source));\r\n            candidates.forEach(function (candidate) {\r\n                if (candidate.collided(source)) {\r\n                    if (deep) {\r\n                        if (_this.pointsInPolygon(source, candidate || _this.pointsInPolygon(candidate, source))) {\r\n                            cb(source, candidate);\r\n                        }\r\n                    }\r\n                    else {\r\n                        cb(source, candidate);\r\n                    }\r\n                }\r\n                else if (dcb) {\r\n                    dcb(source, candidate);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    Collisions.prototype.pointsInPolygon = function (source, candidate) {\r\n        var vert1 = source.vertices.length > candidate.vertices.length ? source.vertices : candidate.vertices;\r\n        var vert2 = source.vertices.length <= candidate.vertices.length ? source.vertices : candidate.vertices;\r\n        for (var i = 0, l = vert2.length; i < l; i++) {\r\n            if (this.pointInPoly(vert1, vert2[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    Collisions.prototype.pointInPoly = function (v, t) {\r\n        var polyCorners = v.length - 1;\r\n        var i, j = polyCorners - 1;\r\n        var polyX = v.map(function (p) { return p.x; });\r\n        var polyY = v.map(function (p) { return p.y; });\r\n        var x = t.x;\r\n        var y = t.y;\r\n        var oddNodes = 0;\r\n        for (i = 0; i < polyCorners; i++) {\r\n            if ((polyY[i] < y && polyY[j] >= y\r\n                || polyY[j] < y && polyY[i] >= y)\r\n                && (polyX[i] <= x || polyX[j] <= x)) {\r\n                oddNodes ^= polyX[i] + (y - polyY[i]) / (polyY[j] - polyY[i]) * (polyX[j] - polyX[i]) < x;\r\n            }\r\n            j = i;\r\n        }\r\n        return oddNodes;\r\n    };\r\n    return Collisions;\r\n}());\r\nexports.Collisions = Collisions;\r\n\n\n//# sourceURL=webpack://asteroids/./src/collisions.ts?");

/***/ }),

/***/ "./src/draw.ts":
/*!*********************!*\
  !*** ./src/draw.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Draw = exports.white = exports.cyan = exports.magenta = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar ship_1 = __webpack_require__(/*! ./ship */ \"./src/ship.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar global_1 = __webpack_require__(/*! ./global */ \"./src/global.ts\");\r\nvar VectorLine = 'rgba(255,255,255,.8)';\r\nvar TextColor = 'rgba(255,255,255,.8)';\r\nvar Y_START = 20;\r\nvar DefaultLineWidth = 2;\r\nfunction magenta(opacity) {\r\n    if (opacity === void 0) { opacity = 1; }\r\n    return \"rgba(255,0,255, \".concat(opacity, \")\");\r\n}\r\nexports.magenta = magenta;\r\nfunction cyan(opacity) {\r\n    if (opacity === void 0) { opacity = 1; }\r\n    return \"rgba(0,255,255, \".concat(opacity, \")\");\r\n}\r\nexports.cyan = cyan;\r\nfunction white(opacity) {\r\n    if (opacity === void 0) { opacity = 1; }\r\n    return \"rgba(255,255,255, \".concat(opacity, \")\");\r\n}\r\nexports.white = white;\r\nvar magenta5 = magenta(.5);\r\nvar cyan5 = cyan(.5);\r\nvar Draw = (function () {\r\n    function Draw(ctx) {\r\n        this.ctx = ctx;\r\n    }\r\n    Draw.prototype.line = function (x1, y1, x2, y2, color, width) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        if (width === void 0) { width = DefaultLineWidth; }\r\n        var ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = width;\r\n        ctx.moveTo(x1, y1);\r\n        ctx.strokeStyle = color;\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    };\r\n    Draw.prototype.vectorline = function (x1, y1, x2, y2, color, width) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        if (width === void 0) { width = DefaultLineWidth; }\r\n        var ctx = this.ctx;\r\n        var old = ctx.strokeStyle;\r\n        if (global_1.default.burn) {\r\n            this.line(x1 - 2, y1, x2 - 2, y2, magenta5);\r\n            this.line(x1 - 1, y1 - 2, x2 - 1, y2 - 1, cyan5);\r\n        }\r\n        this.line(x1, y1, x2, y2, color);\r\n        ctx.strokeStyle = old;\r\n    };\r\n    Draw.prototype.shape = function (points, x, y, color, closed) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        if (closed === void 0) { closed = true; }\r\n        var p1, p2;\r\n        var l = points.length - 1;\r\n        var i = 0;\r\n        this.ctx.save();\r\n        for (var i_1 = 0; i_1 < l; i_1++) {\r\n            this.line(x + points[i_1].x, y + points[i_1].y, x + points[i_1 + 1].x, y + points[i_1 + 1].y, color);\r\n        }\r\n        if (closed) {\r\n            this.line(x + points[l].x, y + points[l].y, x + points[0].x, y + points[0].y, color);\r\n        }\r\n        this.ctx.restore();\r\n    };\r\n    Draw.prototype.vectorShape = function (points, x, y, color, closed) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        if (closed === void 0) { closed = true; }\r\n        var p1, p2;\r\n        var l = points.length - 1;\r\n        var i = 0;\r\n        this.ctx.save();\r\n        for (var i_2 = 0; i_2 < l; i_2++) {\r\n            this.vectorline(x + points[i_2].x, y + points[i_2].y, x + points[i_2 + 1].x, y + points[i_2 + 1].y, color);\r\n        }\r\n        if (closed) {\r\n            this.vectorline(x + points[l].x, y + points[l].y, x + points[0].x, y + points[0].y, color);\r\n        }\r\n        this.ctx.restore();\r\n    };\r\n    Draw.prototype.rect = function (x, y, width, height, color) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        var ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(x, y, width, height);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    };\r\n    Draw.prototype.point = function (p, fillStyle) {\r\n        if (fillStyle === void 0) { fillStyle = VectorLine; }\r\n        this.rect(p.x, p.y, screen_1.default.pointSize, screen_1.default.pointSize, fillStyle);\r\n    };\r\n    Draw.prototype.background = function (color) {\r\n        if (color === void 0) { color = '#000000'; }\r\n        var ctx = this.ctx;\r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(0, 0, screen_1.default.width, screen_1.default.height);\r\n    };\r\n    Draw.prototype.scanlines = function () {\r\n        if (!global_1.default.burn) {\r\n            return;\r\n        }\r\n        var ctx = this.ctx;\r\n        var step = (0, util_1.random)(2, 5);\r\n        for (var i = 0; i < screen_1.default.height - step; i += step) {\r\n            ctx.beginPath();\r\n            ctx.lineWidth = 1;\r\n            ctx.moveTo(0, i);\r\n            ctx.strokeStyle = '#001111';\r\n            ctx.lineTo(screen_1.default.width, i);\r\n            ctx.stroke();\r\n            ctx.moveTo(0, i + 1);\r\n            ctx.strokeStyle = 'rgba(255,0,255,.5)';\r\n            ctx.lineTo(screen_1.default.width, i + 1);\r\n            ctx.stroke();\r\n            ctx.moveTo(0, i + 2);\r\n            ctx.strokeStyle = 'rgba(0,255,255,.3)';\r\n            ctx.lineTo(screen_1.default.width, i + 2);\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n        }\r\n    };\r\n    Draw.prototype.bounds = function (rect, color) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        var ctx = this.ctx;\r\n        if (!rect) {\r\n            return;\r\n        }\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(rect.x, rect.y);\r\n        ctx.lineTo(rect.x + rect.width, rect.y);\r\n        ctx.lineTo(rect.x + rect.width, rect.y + rect.height);\r\n        ctx.lineTo(rect.x, rect.y + rect.height);\r\n        ctx.lineTo(rect.x, rect.y);\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n    };\r\n    Draw.prototype.text = function (text, x, y, size, color) {\r\n        if (color === void 0) { color = TextColor; }\r\n        var ctx = this.ctx;\r\n        ctx.save();\r\n        ctx.font = \"\".concat(size, \"pt hyperspace\");\r\n        ctx.textBaseline = 'middle';\r\n        ctx.lineWidth = 1;\r\n        if (global_1.default.burn) {\r\n            ctx.strokeStyle = magenta5;\r\n            ctx.strokeText(text, x - 2, y - 2);\r\n            ctx.strokeStyle = cyan5;\r\n            ctx.strokeText(text, x - 1, y - 1);\r\n        }\r\n        ctx.strokeStyle = color;\r\n        ctx.strokeText(text, x, y);\r\n        ctx.restore();\r\n    };\r\n    Draw.prototype.text2 = function (text, size, cb) {\r\n        var ctx = this.ctx;\r\n        ctx.save();\r\n        ctx.font = \"\".concat(size, \"pt hyperspace\");\r\n        ctx.textBaseline = 'middle';\r\n        ctx.lineWidth = 1;\r\n        var width = ctx.measureText(text).width;\r\n        var point = cb(width);\r\n        if (global_1.default.burn) {\r\n            ctx.strokeStyle = magenta(.5);\r\n            ctx.strokeText(text, point.x - 2, point.y - 2);\r\n            ctx.strokeStyle = cyan(.5);\r\n            ctx.strokeText(text, point.x - 1, point.y - 1);\r\n        }\r\n        ctx.strokeStyle = TextColor;\r\n        ctx.strokeText(text, point.x, point.y);\r\n        ctx.restore();\r\n    };\r\n    Draw.prototype.text3 = function (text, size, cb) {\r\n        var ctx = this.ctx;\r\n        ctx.save();\r\n        ctx.font = \"\".concat(size, \"pt hyperspace\");\r\n        ctx.textBaseline = 'middle';\r\n        var width = ctx.measureText(text).width;\r\n        var point = cb(width);\r\n        if (global_1.default.burn) {\r\n            ctx.fillStyle = magenta(.5);\r\n            ctx.fillText(text, point.x - 2, point.y - 2);\r\n            ctx.fillStyle = cyan(.5);\r\n            ctx.fillText(text, point.x - 1, point.y - 1);\r\n        }\r\n        ctx.fillStyle = TextColor;\r\n        ctx.fillText(text, point.x, point.y);\r\n        ctx.restore();\r\n    };\r\n    Draw.prototype.scorePlayer1 = function (score) {\r\n        var X_START = 100;\r\n        var text = score.toString();\r\n        while (text.length < 2) {\r\n            text = '0' + text;\r\n        }\r\n        ;\r\n        this.text(text, X_START, Y_START, screen_1.default.font.medium);\r\n    };\r\n    Draw.prototype.highscore = function (score) {\r\n        var text = score.toString();\r\n        while (text.length < 2) {\r\n            text = '0' + text;\r\n        }\r\n        this.text2(text, screen_1.default.font.small, function (width) {\r\n            return {\r\n                x: screen_1.default.width2 - (width / 2),\r\n                y: Y_START\r\n            };\r\n        });\r\n    };\r\n    Draw.prototype.oneCoinOnePlay = function () {\r\n        this.text2('1  coin  1  play', screen_1.default.font.medium, function (width) {\r\n            return {\r\n                x: screen_1.default.width2 - (width / 2),\r\n                y: (screen_1.default.height / 8) * 7\r\n            };\r\n        });\r\n    };\r\n    Draw.prototype.pushStart = function () {\r\n        screen_1.default.draw.text3('push start', screen_1.default.font.xlarge, function (width) {\r\n            return {\r\n                x: screen_1.default.width2 - (width / 2),\r\n                y: screen_1.default.height / 8\r\n            };\r\n        });\r\n    };\r\n    Draw.prototype.player1 = function () {\r\n        screen_1.default.draw.text3('player 1', screen_1.default.font.xlarge, function (width) {\r\n            return {\r\n                x: screen_1.default.width2 - (width / 2),\r\n                y: screen_1.default.height / 4.5\r\n            };\r\n        });\r\n    };\r\n    Draw.prototype.gameOver = function () {\r\n        screen_1.default.draw.text3('game over', screen_1.default.font.xlarge, function (width) {\r\n            return {\r\n                x: screen_1.default.width2 - (width / 2),\r\n                y: screen_1.default.height / 4.5\r\n            };\r\n        });\r\n    };\r\n    Draw.prototype.copyright = function () {\r\n        this.text2(String.fromCharCode(169) + ' 1979 atari inc', screen_1.default.font.small, function (width) {\r\n            return {\r\n                x: screen_1.default.width2 - (width / 2),\r\n                y: screen_1.default.height - screen_1.default.font.small\r\n            };\r\n        });\r\n    };\r\n    Draw.prototype.drawExtraLives = function (lives) {\r\n        lives = Math.min(lives, 10);\r\n        var life = new ship_1.Ship(0, 0);\r\n        var loc = (life.x + life.width) * 2.3;\r\n        var y = Y_START + screen_1.default.font.medium + 10;\r\n        for (var i = 0; i < lives; i++) {\r\n            life.origin.x = 80 + (i * loc);\r\n            life.origin.y = y;\r\n            life.render();\r\n        }\r\n    };\r\n    Draw.prototype.circle = function (x, y, radius, color) {\r\n        if (color === void 0) { color = VectorLine; }\r\n        var ctx = this.ctx;\r\n        if (global_1.default.burn) {\r\n            ctx.beginPath();\r\n            ctx.arc(x - 2, y - 2, radius, 0, 2 * Math.PI, false);\r\n            ctx.strokeStyle = magenta(.2);\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            ctx.beginPath();\r\n            ctx.arc(x - 1, y - 1, radius, 0, 2 * Math.PI, false);\r\n            ctx.strokeStyle = cyan(.2);\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n        }\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n        ctx.strokeStyle = color;\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    };\r\n    return Draw;\r\n}());\r\nexports.Draw = Draw;\r\n\n\n//# sourceURL=webpack://asteroids/./src/draw.ts?");

/***/ }),

/***/ "./src/events.ts":
/*!***********************!*\
  !*** ./src/events.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EventSource = void 0;\r\nvar EventSource = (function () {\r\n    function EventSource() {\r\n        this.handlers = {};\r\n    }\r\n    EventSource.prototype.on = function (event, handler) {\r\n        if (!this.handlers[event]) {\r\n            this.handlers[event] = [];\r\n        }\r\n        this.handlers[event].push(handler);\r\n    };\r\n    EventSource.prototype.off = function (event, handler) {\r\n        this.handlers[event] = this.handlers[event].filter(function (x) { return x !== handler; });\r\n    };\r\n    EventSource.prototype.trigger = function (event) {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var handlers = this.handlers[event] || [];\r\n        handlers.forEach(function (x) { return x.apply(void 0, __spreadArray([_this], args, false)); });\r\n    };\r\n    return EventSource;\r\n}());\r\nexports.EventSource = EventSource;\r\n\n\n//# sourceURL=webpack://asteroids/./src/events.ts?");

/***/ }),

/***/ "./src/explosion.ts":
/*!**************************!*\
  !*** ./src/explosion.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Explosion = void 0;\r\nvar events_1 = __webpack_require__(/*! ./events */ \"./src/events.ts\");\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar vector_1 = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar VELOCITY = 300 * screen_1.default.objectScale;\r\nvar Explosion = (function (_super) {\r\n    __extends(Explosion, _super);\r\n    function Explosion(x, y, size) {\r\n        if (size === void 0) { size = 100; }\r\n        var _this = _super.call(this) || this;\r\n        _this.x = x;\r\n        _this.y = y;\r\n        _this.size = size;\r\n        _this.life = 1;\r\n        _this.points = [];\r\n        for (var i = 0; i < 15; i++) {\r\n            var v = vector_1.Vector.fromAngle((0, util_1.random)(1, 360), Math.random() * VELOCITY);\r\n            _this.points.push({ x: x, y: y, vx: v.x, vy: v.y, alpha: Math.random() });\r\n        }\r\n        return _this;\r\n    }\r\n    Explosion.prototype.update = function (dt) {\r\n        this.points.forEach(function (point) {\r\n            point.x += point.vx * dt;\r\n            point.y += point.vy * dt;\r\n            point.alpha -= .002;\r\n        });\r\n        this.life -= dt;\r\n        if (this.life <= .1) {\r\n            this.trigger('expired');\r\n        }\r\n    };\r\n    Explosion.prototype.render = function (dt) {\r\n        this.points.forEach(function (p) {\r\n            if ((0, util_1.random)(1, 10) % 2 === 0) {\r\n                screen_1.default.draw.rect(p.x, p.y, 2, 2, \"rgba(255,255,255,\".concat(p.alpha, \")\"));\r\n            }\r\n        });\r\n    };\r\n    return Explosion;\r\n}(events_1.EventSource));\r\nexports.Explosion = Explosion;\r\n\n\n//# sourceURL=webpack://asteroids/./src/explosion.ts?");

/***/ }),

/***/ "./src/flash.ts":
/*!**********************!*\
  !*** ./src/flash.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Flash = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar events_1 = __webpack_require__(/*! ./events */ \"./src/events.ts\");\r\nvar Flash = (function (_super) {\r\n    __extends(Flash, _super);\r\n    function Flash(frames) {\r\n        var _this = _super.call(this) || this;\r\n        _this.frames = frames;\r\n        return _this;\r\n    }\r\n    Flash.prototype.render = function () {\r\n        this.draw();\r\n    };\r\n    Flash.prototype.update = function (dt) {\r\n        this.frames--;\r\n        if (this.frames <= 0) {\r\n            this.trigger('expired');\r\n        }\r\n    };\r\n    Flash.prototype.draw = function () {\r\n        screen_1.default.draw.background('#ffffff');\r\n        screen_1.default.draw.scanlines();\r\n    };\r\n    return Flash;\r\n}(events_1.EventSource));\r\nexports.Flash = Flash;\r\n\n\n//# sourceURL=webpack://asteroids/./src/flash.ts?");

/***/ }),

/***/ "./src/gameMode.ts":
/*!*************************!*\
  !*** ./src/gameMode.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GameMode = void 0;\r\nvar events_1 = __webpack_require__(/*! ./events */ \"./src/events.ts\");\r\nvar collisions_1 = __webpack_require__(/*! ./collisions */ \"./src/collisions.ts\");\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar thump_1 = __webpack_require__(/*! ./thump */ \"./src/thump.ts\");\r\nvar global_1 = __webpack_require__(/*! ./global */ \"./src/global.ts\");\r\nvar GameMode = (function (_super) {\r\n    __extends(GameMode, _super);\r\n    function GameMode(world) {\r\n        var _this = _super.call(this) || this;\r\n        _this.world = world;\r\n        _this.bounds = [];\r\n        _this.lines = [];\r\n        return _this;\r\n    }\r\n    GameMode.prototype.init = function () {\r\n        this.world.addShip(screen_1.default.width2, screen_1.default.height2);\r\n        this.world.startLevel();\r\n        this.thumper = new thump_1.Thumper();\r\n    };\r\n    GameMode.prototype.update = function (dt) {\r\n        this.world.levelTimer += dt;\r\n        if (this.thumper && this.world.ship) {\r\n            this.thumper.update(dt);\r\n        }\r\n        if (this.world.gameOver) {\r\n            this.world.gameOverTimer += dt;\r\n            if (this.world.gameOverTimer >= 5) {\r\n                this.trigger('done', this.world);\r\n            }\r\n        }\r\n        if (!this.world.started) {\r\n            if (this.world.levelTimer >= 2) {\r\n                this.init();\r\n                this.world.started = true;\r\n            }\r\n            return;\r\n        }\r\n        this.checkCollisions(dt);\r\n        this.world.updateAlienTimer(dt);\r\n        if (!this.world.gameOver) {\r\n            if (this.world.shouldTryToPlaceShip()) {\r\n                this.world.tryPlaceShip(dt);\r\n            }\r\n            if (this.world.shouldCheckForNextLevel()) {\r\n                this.world.startLevel();\r\n                this.thumper.reset();\r\n            }\r\n        }\r\n        if (!this.world.lives) {\r\n            this.world.gameOver = true;\r\n        }\r\n        this.world.update(dt);\r\n    };\r\n    GameMode.prototype.render = function (delta) {\r\n        if (global_1.default.paused) {\r\n            return;\r\n        }\r\n        this.renderStatic();\r\n        this.world.render(delta);\r\n    };\r\n    GameMode.prototype.renderStatic = function () {\r\n        screen_1.default.draw.background();\r\n        screen_1.default.draw.copyright();\r\n        screen_1.default.draw.scorePlayer1(this.world.score);\r\n        screen_1.default.draw.highscore(this.world.highscore);\r\n        screen_1.default.draw.drawExtraLives(this.world.lives);\r\n        if (this.world.ship) {\r\n            screen_1.default.draw.vectorline(40, 80, 140, 80, \"rgba(255,255,255,.4)\");\r\n            screen_1.default.draw.vectorline(40, 80, 40 + this.world.ship.shield * 100, 80, \"rgba(255,255,255,.6)\");\r\n        }\r\n        if (!this.world.started) {\r\n            screen_1.default.draw.player1();\r\n        }\r\n        if (this.world.gameOver) {\r\n            screen_1.default.draw.gameOver();\r\n        }\r\n        if (global_1.default.debug) {\r\n            this.renderDebug();\r\n        }\r\n        if (global_1.default.god) {\r\n            screen_1.default.draw.text2('god', screen_1.default.font.small, function (width) {\r\n                return { x: screen_1.default.width - width - 10, y: screen_1.default.height - 80 };\r\n            });\r\n        }\r\n    };\r\n    GameMode.prototype.renderDebug = function () {\r\n        screen_1.default.draw.text2('debug mode', screen_1.default.font.small, function (width) {\r\n            return { x: screen_1.default.width - width - 10, y: screen_1.default.height - 40 };\r\n        });\r\n        if (this.bounds) {\r\n            this.bounds.forEach(function (r) {\r\n                screen_1.default.draw.bounds(r, '#fc058d');\r\n            });\r\n        }\r\n        this.lines.forEach(function (l) {\r\n            screen_1.default.draw.vectorline(l[0].origin.x, l[0].origin.y, l[1].origin.x, l[1].origin.y, '#fd1f00');\r\n        });\r\n        if (!this.world.ship && this.world.lives) {\r\n            var rect = screen_1.default.shipRect;\r\n            screen_1.default.draw.bounds(rect, '#00ff00');\r\n        }\r\n        if (this.world.ship) {\r\n            screen_1.default.draw.text(this.world.ship.angle.toString(), this.world.ship.origin.x + 20, this.world.ship.origin.y + 20, 10);\r\n            screen_1.default.draw.text(this.world.ship.velocity.x.toString(), this.world.ship.origin.x + 20, this.world.ship.origin.y + 40, 10);\r\n            screen_1.default.draw.text(this.world.ship.velocity.y.toString(), this.world.ship.origin.x + 20, this.world.ship.origin.y + 60, 10);\r\n        }\r\n        var date = new Date(null);\r\n        date.setSeconds(this.world.levelTimer);\r\n        screen_1.default.draw.text2(date.toISOString().substr(11, 8), screen_1.default.font.small, function (width) {\r\n            return { x: 10, y: screen_1.default.height - 40 };\r\n        });\r\n    };\r\n    GameMode.prototype.checkCollisions = function (dt) {\r\n        var _this = this;\r\n        var _a = this.world, ship = _a.ship, rocks = _a.rocks, shipBullets = _a.shipBullets, alien = _a.alien, alienBullets = _a.alienBullets, shockwaves = _a.shockwaves, powerup = _a.powerup;\r\n        if (!this.world.shouldCheckCollisions()) {\r\n            return;\r\n        }\r\n        this.bounds.length = 0;\r\n        this.lines.length = 0;\r\n        var collisions = new collisions_1.Collisions();\r\n        collisions.bulletCheck(shipBullets, rocks, function (bullet, rock) {\r\n            _this.world.shake();\r\n            _this.world.addScore(rock);\r\n            _this.world.rockDestroyed(rock);\r\n            bullet.destroy();\r\n        }, function (bullet1, bullet2, rock) {\r\n            if (global_1.default.debug) {\r\n                _this.bounds.push(rock);\r\n                _this.lines.push([bullet1, bullet2]);\r\n            }\r\n        });\r\n        collisions.bulletCheck(shipBullets, [alien], function (bullet, alien) {\r\n            _this.world.shake();\r\n            _this.world.addScore(alien);\r\n            _this.world.alienDestroyed();\r\n            bullet.destroy();\r\n        }, function (bullet1, bullet2, alien) {\r\n            if (global_1.default.debug) {\r\n                _this.bounds.push(alien);\r\n                _this.lines.push([bullet1, bullet2]);\r\n            }\r\n        });\r\n        var cowboys = [];\r\n        shockwaves.filter(function (x) { return x.rocks.length; }).forEach(function (y) { return cowboys.push.apply(cowboys, y.rocks); });\r\n        var indians = this.world.rocks.filter(function (x) { return cowboys.indexOf(x) < 0; });\r\n        collisions.check(cowboys, indians, false, function (cowboy, indian) {\r\n            _this.world.addScore(cowboy);\r\n            _this.world.addScore(indian);\r\n            _this.world.rockDestroyed(cowboy);\r\n            _this.world.rockDestroyed(indian);\r\n        });\r\n        collisions.check([ship], [powerup], true, function (ship, powerup) {\r\n            _this.world.addPowerup();\r\n            powerup.destroy();\r\n        }, function (ship, powerup) {\r\n            if (global_1.default.debug) {\r\n                _this.bounds.push(powerup);\r\n            }\r\n        });\r\n        if (!global_1.default.god) {\r\n            collisions.check([ship], rocks, true, function (ship, rock) {\r\n                _this.world.shake();\r\n                _this.world.addScore(rock);\r\n                _this.world.rockDestroyed(rock);\r\n                ship.shield -= .25;\r\n                if (ship.shield <= 0) {\r\n                    _this.world.shipDestroyed();\r\n                }\r\n            }, function (ship, rock) {\r\n                if (global_1.default.debug) {\r\n                    _this.bounds.push(rock);\r\n                }\r\n            });\r\n            collisions.check([ship], [alien], true, function (ship, alien) {\r\n                _this.world.shake();\r\n                _this.world.addScore(alien);\r\n                _this.world.alienDestroyed();\r\n                ship.shield -= .5;\r\n                if (ship.shield <= 0) {\r\n                    _this.world.shipDestroyed();\r\n                }\r\n            }, function (ship, alien) {\r\n                if (global_1.default.debug) {\r\n                    _this.bounds.push(alien);\r\n                }\r\n            });\r\n            collisions.check(alienBullets, [ship], true, function (bullet, ship) {\r\n                _this.world.shake();\r\n                ship.shield -= 1;\r\n                if (ship.shield <= 0) {\r\n                    _this.world.shipDestroyed();\r\n                }\r\n                bullet.destroy();\r\n            }, function (bullet, ship) {\r\n                if (global_1.default.debug) {\r\n                    _this.bounds.push(ship);\r\n                }\r\n            });\r\n        }\r\n        collisions.check([alien], rocks, false, function (alien, rock) {\r\n            _this.world.shake();\r\n            _this.world.alienDestroyed();\r\n            _this.world.rockDestroyed(rock);\r\n        }, function (alien, rock) {\r\n            if (global_1.default.debug) {\r\n                _this.bounds.push(rock);\r\n            }\r\n        });\r\n        collisions.check(alienBullets, rocks, false, function (bullet, rock) {\r\n            _this.world.shake();\r\n            _this.world.rockDestroyed(rock);\r\n        }, function (bullet, rock) {\r\n            if (global_1.default.debug) {\r\n                _this.bounds.push(rock);\r\n            }\r\n        });\r\n    };\r\n    return GameMode;\r\n}(events_1.EventSource));\r\nexports.GameMode = GameMode;\r\n\n\n//# sourceURL=webpack://asteroids/./src/gameMode.ts?");

/***/ }),

/***/ "./src/global.ts":
/*!***********************!*\
  !*** ./src/global.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar Global = (function () {\r\n    function Global() {\r\n        this.debug = false;\r\n        this.paused = false;\r\n        this.god = false;\r\n        this.burn = true;\r\n    }\r\n    return Global;\r\n}());\r\nexports[\"default\"] = new Global();\r\n\n\n//# sourceURL=webpack://asteroids/./src/global.ts?");

/***/ }),

/***/ "./src/highScoreMode.ts":
/*!******************************!*\
  !*** ./src/highScoreMode.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HighScoreMode = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar highscores_1 = __webpack_require__(/*! ./highscores */ \"./src/highscores.ts\");\r\nvar HighScoreMode = (function () {\r\n    function HighScoreMode(score) {\r\n        this.score = score;\r\n        this.blink = 0;\r\n        this.showPushStart = true;\r\n        this.highscore = highscores_1.highscores.top.score;\r\n    }\r\n    HighScoreMode.prototype.update = function (dt) {\r\n        this.blink += dt;\r\n        if (this.blink >= .4) {\r\n            this.blink = 0;\r\n            this.showPushStart = !this.showPushStart;\r\n        }\r\n    };\r\n    HighScoreMode.prototype.render = function () {\r\n        this.drawBackground();\r\n        this.drawPushStart();\r\n        this.drawHighScores();\r\n    };\r\n    HighScoreMode.prototype.drawBackground = function () {\r\n        screen_1.default.draw.background();\r\n        screen_1.default.draw.scorePlayer1(this.score);\r\n        screen_1.default.draw.oneCoinOnePlay();\r\n        screen_1.default.draw.highscore(this.highscore);\r\n        screen_1.default.draw.copyright();\r\n    };\r\n    HighScoreMode.prototype.drawHighScores = function () {\r\n        var screenX = screen_1.default.width / 2;\r\n        var startY = Math.ceil(screen_1.default.height / 4.5) + (screen_1.default.font.xlarge + screen_1.default.font.small);\r\n        var spacing = screen_1.default.font.medium + screen_1.default.font.small;\r\n        screen_1.default.draw.text2('high scores', screen_1.default.font.large, function (width) {\r\n            return {\r\n                x: screenX - (width / 2),\r\n                y: screen_1.default.height / 4.5\r\n            };\r\n        });\r\n        var _loop_1 = function (i) {\r\n            var y = startY + (i * spacing);\r\n            var text = \"\".concat(this_1.pad(i + 1, ' ', 2), \".\").concat(this_1.pad(highscores_1.highscores.scores[i].score, ' ', 6), \" \").concat(highscores_1.highscores.scores[i].initials);\r\n            screen_1.default.draw.text2(text, screen_1.default.font.large, function (width) {\r\n                return {\r\n                    x: screenX - (width / 2),\r\n                    y: y\r\n                };\r\n            });\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < highscores_1.highscores.scores.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    HighScoreMode.prototype.drawPushStart = function () {\r\n        if (this.showPushStart) {\r\n            screen_1.default.draw.pushStart();\r\n        }\r\n    };\r\n    HighScoreMode.prototype.pad = function (text, char, count) {\r\n        text = text.toString();\r\n        while (text.length < count) {\r\n            text = char + text;\r\n        }\r\n        return text;\r\n    };\r\n    return HighScoreMode;\r\n}());\r\nexports.HighScoreMode = HighScoreMode;\r\n\n\n//# sourceURL=webpack://asteroids/./src/highScoreMode.ts?");

/***/ }),

/***/ "./src/highscores.ts":
/*!***************************!*\
  !*** ./src/highscores.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.highscores = void 0;\r\nvar defaults = [\r\n    { score: 20140, initials: 'J H' },\r\n    { score: 20050, initials: 'P A' },\r\n    { score: 19930, initials: '  M' },\r\n    { score: 19870, initials: 'G I' },\r\n    { score: 19840, initials: 'A L' },\r\n    { score: 19790, initials: 'M T' },\r\n    { score: 19700, initials: 'E O' },\r\n    { score: 19660, initials: 'S N' },\r\n    { score: 190, initials: '   ' },\r\n    { score: 70, initials: '   ' },\r\n];\r\nvar SCORE_KEY = 'jph_asteroids_hs';\r\nvar _Highscores = (function () {\r\n    function _Highscores() {\r\n        this.scores = [];\r\n        var str = window.localStorage.getItem(SCORE_KEY);\r\n        this.scores = str ? JSON.parse(str) || [] : defaults;\r\n    }\r\n    Object.defineProperty(_Highscores.prototype, \"top\", {\r\n        get: function () {\r\n            return this.scores[0];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    _Highscores.prototype.qualifies = function (score) {\r\n        var less = exports.highscores.scores.filter(function (x) { return x.score < score; });\r\n        return !!less.length;\r\n    };\r\n    _Highscores.prototype.save = function (score, initials) {\r\n        if (this.qualifies(score)) {\r\n            this.scores.push({ score: score, initials: initials });\r\n            this.scores = this.scores.sort(function (a, b) { return a.score > b.score ? -1 : 1; }).slice(0, 10);\r\n            window.localStorage.setItem(SCORE_KEY, JSON.stringify(this.scores));\r\n        }\r\n    };\r\n    return _Highscores;\r\n}());\r\nexports.highscores = new _Highscores();\r\n\n\n//# sourceURL=webpack://asteroids/./src/highscores.ts?");

/***/ }),

/***/ "./src/initialsMode.ts":
/*!*****************************!*\
  !*** ./src/initialsMode.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InitialsMode = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar keys_1 = __webpack_require__(/*! ./keys */ \"./src/keys.ts\");\r\nvar highscores_1 = __webpack_require__(/*! ./highscores */ \"./src/highscores.ts\");\r\nvar events_1 = __webpack_require__(/*! ./events */ \"./src/events.ts\");\r\nvar letters = '_abcdefghijklmnopqrstuvwxyz';\r\nvar InitialsMode = (function (_super) {\r\n    __extends(InitialsMode, _super);\r\n    function InitialsMode(score) {\r\n        var _this = _super.call(this) || this;\r\n        _this.index = 1;\r\n        _this.score = score;\r\n        _this.init();\r\n        return _this;\r\n    }\r\n    InitialsMode.prototype.init = function () {\r\n        this.position = 0;\r\n        this.index = 1;\r\n        this.initials = ['a', '_', '_'];\r\n    };\r\n    InitialsMode.prototype.update = function (dt) {\r\n        if (keys_1.Key.wasRotateLeft()) {\r\n            this.index--;\r\n            if (this.index < 0) {\r\n                this.index = letters.length - 1;\r\n            }\r\n            this.initials[this.position] = letters[this.index];\r\n        }\r\n        if (keys_1.Key.wasRotateRight()) {\r\n            this.index++;\r\n            if (this.index > letters.length - 1) {\r\n                this.index = 0;\r\n            }\r\n            this.initials[this.position] = letters[this.index];\r\n        }\r\n        if (keys_1.Key.wasHyperspace()) {\r\n            this.position++;\r\n            if (this.position >= 3) {\r\n                highscores_1.highscores.save(this.score, this.initials.join('').replace('_', ' '));\r\n                this.init();\r\n                this.trigger('done');\r\n            }\r\n            this.index = 1;\r\n            this.initials[this.position] = letters[this.index];\r\n        }\r\n    };\r\n    InitialsMode.prototype.render = function () {\r\n        var offset = screen_1.default.height / 4.5;\r\n        var text = (function (t) { return screen_1.default.draw.text(t, 50, offset += screen_1.default.font.large + 5, screen_1.default.font.large); });\r\n        screen_1.default.draw.background();\r\n        screen_1.default.draw.highscore(highscores_1.highscores.top.score);\r\n        screen_1.default.draw.scorePlayer1(this.score);\r\n        screen_1.default.draw.copyright();\r\n        text('your score is one of the ten best');\r\n        text('please enter your initials');\r\n        text('push rotate to select letter');\r\n        text('push hyperspace when letter is correct');\r\n        screen_1.default.draw.text3(this.initials.join(''), screen_1.default.font.xlarge, function (width) {\r\n            return { x: screen_1.default.width2 - (width / 2), y: screen_1.default.height / 2 + screen_1.default.font.xlarge };\r\n        });\r\n    };\r\n    return InitialsMode;\r\n}(events_1.EventSource));\r\nexports.InitialsMode = InitialsMode;\r\n\n\n//# sourceURL=webpack://asteroids/./src/initialsMode.ts?");

/***/ }),

/***/ "./src/keys.ts":
/*!*********************!*\
  !*** ./src/keys.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Key = exports._Key = exports.Keys = void 0;\r\nvar Hammer = __webpack_require__(/*! hammerjs */ \"./node_modules/hammerjs/hammer.js\");\r\nexports.Keys = {\r\n    HYPERSPACE: 32,\r\n    ROTATE_LEFT: 37,\r\n    ROTATE_LEFT_A: 65,\r\n    ROTATE_RIGHT: 39,\r\n    ROTATE_RIGHT_D: 68,\r\n    THRUST: 38,\r\n    THRUST_W: 87,\r\n    FIRE: 17,\r\n    DEBUG: 90,\r\n    PAUSE: 80,\r\n    GOD: 71,\r\n    MONITOR_BURN: 66,\r\n};\r\nvar _Key = (function () {\r\n    function _Key() {\r\n        var _this = this;\r\n        this.keys = {};\r\n        this.prev = {};\r\n        this.touched = false;\r\n        this.rotateLeft = function (active) {\r\n            _this.keys[exports.Keys.ROTATE_LEFT] = active;\r\n            _this.keys[exports.Keys.ROTATE_LEFT_A] = active;\r\n        };\r\n        this.rotateRight = function (active) {\r\n            _this.keys[exports.Keys.ROTATE_RIGHT] = active;\r\n            _this.keys[exports.Keys.ROTATE_RIGHT_D] = active;\r\n        };\r\n        this.thrust = function (active) {\r\n            _this.keys[exports.Keys.THRUST] = active;\r\n        };\r\n        this.fire = function (active) {\r\n            _this.keys[exports.Keys.FIRE] = active;\r\n        };\r\n        this.hyperspace = function (active) {\r\n            _this.keys[exports.Keys.HYPERSPACE] = active;\r\n        };\r\n        window.onkeydown = function (e) {\r\n            console.log(e.keyCode);\r\n            _this.keys[e.keyCode] = true;\r\n        };\r\n        window.onkeyup = function (e) {\r\n            _this.keys[e.keyCode] = false;\r\n        };\r\n        var stage = document.getElementById('game');\r\n        this.mc = new Hammer.Manager(stage);\r\n        var pan = new Hammer.Pan();\r\n        var tap = new Hammer.Tap();\r\n        var pinch = new Hammer.Pinch({\r\n            enable: true\r\n        });\r\n        this.mc.add(pan);\r\n        this.mc.add(tap, {\r\n            interval: 50\r\n        });\r\n        this.mc.add(pinch);\r\n        this.mc.on('panup', function (e) {\r\n            _this.thrust(true);\r\n        });\r\n        this.mc.on('panleft', function (e) {\r\n            _this.rotateLeft(true);\r\n        });\r\n        this.mc.on('panright', function (e) {\r\n            _this.rotateRight(true);\r\n        });\r\n        this.mc.on('panend', function (e) {\r\n            _this.thrust(false);\r\n            _this.rotateLeft(false);\r\n            _this.rotateRight(false);\r\n        });\r\n        this.mc.on('tap', function (e) {\r\n            _this.fire(true);\r\n            _this.touched = true;\r\n        });\r\n        this.mc.on('pinchout', function (e) {\r\n            _this.hyperspace(true);\r\n        });\r\n        this.mc.on('pinchend', function (e) {\r\n            _this.hyperspace(false);\r\n        });\r\n    }\r\n    _Key.prototype.update = function () {\r\n        var _this = this;\r\n        Object.keys(this.keys).forEach(function (key) {\r\n            _this.prev[key] = _this.keys[key];\r\n        });\r\n        if (this.touched) {\r\n            this.fire(false);\r\n        }\r\n        this.touched = !this.touched;\r\n    };\r\n    _Key.prototype.isPressed = function (key) {\r\n        return this.prev[key] === false && this.keys[key] === true;\r\n    };\r\n    _Key.prototype.wasPressed = function (key) {\r\n        return this.prev[key] && !this.keys[key];\r\n    };\r\n    _Key.prototype.isDown = function (key) {\r\n        return this.keys[key];\r\n    };\r\n    _Key.prototype.isAnyPressed = function () {\r\n        return !!Object.values(this.keys).filter(function (pressed) { return pressed; }).length;\r\n    };\r\n    _Key.prototype.isRotateLeft = function () {\r\n        return this.keys[exports.Keys.ROTATE_LEFT] || this.keys[exports.Keys.ROTATE_LEFT_A];\r\n    };\r\n    _Key.prototype.isRotateRight = function () {\r\n        return this.keys[exports.Keys.ROTATE_RIGHT] || this.keys[exports.Keys.ROTATE_RIGHT_D];\r\n    };\r\n    _Key.prototype.isThrust = function () {\r\n        return this.keys[exports.Keys.THRUST] || this.keys[exports.Keys.THRUST_W];\r\n    };\r\n    _Key.prototype.isFire = function () {\r\n        return this.keys[exports.Keys.FIRE];\r\n    };\r\n    _Key.prototype.isHyperspace = function () {\r\n        return this.keys[exports.Keys.HYPERSPACE];\r\n    };\r\n    _Key.prototype.wasRotateLeft = function () {\r\n        return this.isPressed(exports.Keys.ROTATE_LEFT) || this.isPressed(exports.Keys.ROTATE_LEFT_A);\r\n    };\r\n    _Key.prototype.wasRotateRight = function () {\r\n        return this.isPressed(exports.Keys.ROTATE_RIGHT) || this.isPressed(exports.Keys.ROTATE_RIGHT_D);\r\n    };\r\n    _Key.prototype.wasHyperspace = function () {\r\n        return this.isPressed(exports.Keys.HYPERSPACE);\r\n    };\r\n    return _Key;\r\n}());\r\nexports._Key = _Key;\r\nexports.Key = new _Key();\r\n\n\n//# sourceURL=webpack://asteroids/./src/keys.ts?");

/***/ }),

/***/ "./src/lineclip.ts":
/*!*************************!*\
  !*** ./src/lineclip.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.polygonclip = exports.lineclip = void 0;\r\nfunction intersect(a, b, edge, bbox) {\r\n    return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox[3] - a[1]) / (b[1] - a[1]), bbox[3]] :\r\n        edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox[1] - a[1]) / (b[1] - a[1]), bbox[1]] :\r\n            edge & 2 ? [bbox[2], a[1] + (b[1] - a[1]) * (bbox[2] - a[0]) / (b[0] - a[0])] :\r\n                edge & 1 ? [bbox[0], a[1] + (b[1] - a[1]) * (bbox[0] - a[0]) / (b[0] - a[0])] :\r\n                    null;\r\n}\r\nfunction bitCode(p, bbox) {\r\n    var code = 0;\r\n    if (p[0] < bbox[0])\r\n        code |= 1;\r\n    else if (p[0] > bbox[2])\r\n        code |= 2;\r\n    if (p[1] < bbox[1])\r\n        code |= 4;\r\n    else if (p[1] > bbox[3])\r\n        code |= 8;\r\n    return code;\r\n}\r\nfunction lineclip(points, bbox, result) {\r\n    var len = points.length, codeA = bitCode(points[0], bbox), part = [], i, a, b, codeB, lastCode;\r\n    if (!result)\r\n        result = [];\r\n    for (i = 1; i < len; i++) {\r\n        a = points[i - 1];\r\n        b = points[i];\r\n        codeB = lastCode = bitCode(b, bbox);\r\n        while (true) {\r\n            if (!(codeA | codeB)) {\r\n                part.push(a);\r\n                if (codeB !== lastCode) {\r\n                    part.push(b);\r\n                    if (i < len - 1) {\r\n                        result.push(part);\r\n                        part = [];\r\n                    }\r\n                }\r\n                else if (i === len - 1) {\r\n                    part.push(b);\r\n                }\r\n                break;\r\n            }\r\n            else if (codeA & codeB) {\r\n                break;\r\n            }\r\n            else if (codeA) {\r\n                a = intersect(a, b, codeA, bbox);\r\n                codeA = bitCode(a, bbox);\r\n            }\r\n            else {\r\n                b = intersect(a, b, codeB, bbox);\r\n                codeB = bitCode(b, bbox);\r\n            }\r\n        }\r\n        codeA = lastCode;\r\n    }\r\n    if (part.length)\r\n        result.push(part);\r\n    return result;\r\n}\r\nexports.lineclip = lineclip;\r\nfunction polygonclip(points, bbox) {\r\n    var result, edge, prev, prevInside, i, p, inside;\r\n    for (edge = 1; edge <= 8; edge *= 2) {\r\n        result = [];\r\n        prev = points[points.length - 1];\r\n        prevInside = !(bitCode(prev, bbox) & edge);\r\n        for (i = 0; i < points.length; i++) {\r\n            p = points[i];\r\n            inside = !(bitCode(p, bbox) & edge);\r\n            if (inside !== prevInside)\r\n                result.push(intersect(prev, p, edge, bbox));\r\n            if (inside)\r\n                result.push(p);\r\n            prev = p;\r\n            prevInside = inside;\r\n        }\r\n        points = result;\r\n        if (!points.length)\r\n            break;\r\n    }\r\n    return result;\r\n}\r\nexports.polygonclip = polygonclip;\r\n\n\n//# sourceURL=webpack://asteroids/./src/lineclip.ts?");

/***/ }),

/***/ "./src/loop.ts":
/*!*********************!*\
  !*** ./src/loop.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.loop = void 0;\r\nvar timestamp = function () {\r\n    return window.performance && window.performance.now ? window.performance.now() : new Date().getTime();\r\n};\r\nvar now;\r\nvar delta = 0;\r\nvar last = timestamp();\r\nvar DT = 1 / 60;\r\nvar ONE_SECOND = 1000;\r\nvar init = function (state) {\r\n    var frame = function () {\r\n        now = timestamp();\r\n        delta += Math.min(1, (now - last) / ONE_SECOND);\r\n        while (delta > DT) {\r\n            state.update(DT);\r\n            delta -= DT;\r\n        }\r\n        state.render(delta);\r\n        last = now;\r\n        requestAnimationFrame(frame);\r\n    };\r\n    frame();\r\n};\r\nvar loop = function (state) {\r\n    init(state);\r\n};\r\nexports.loop = loop;\r\n\n\n//# sourceURL=webpack://asteroids/./src/loop.ts?");

/***/ }),

/***/ "./src/lut.ts":
/*!********************!*\
  !*** ./src/lut.ts ***!
  \********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SIN = exports.COS = exports.RAD = void 0;\r\nvar RAD = {};\r\nexports.RAD = RAD;\r\nvar COS = {};\r\nexports.COS = COS;\r\nvar SIN = {};\r\nexports.SIN = SIN;\r\nvar r = Math.PI / 180;\r\nfor (var i = 0; i <= 360; i++) {\r\n    RAD[i] = i * r;\r\n    COS[i] = Math.cos(RAD[i]);\r\n    SIN[i] = Math.sin(RAD[i]);\r\n    RAD[-i] = -i * r;\r\n    COS[-i] = Math.cos(RAD[-i]);\r\n    SIN[-i] = Math.sin(RAD[-i]);\r\n}\r\n\n\n//# sourceURL=webpack://asteroids/./src/lut.ts?");

/***/ }),

/***/ "./src/object2d.ts":
/*!*************************!*\
  !*** ./src/object2d.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Object2D = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar events_1 = __webpack_require__(/*! ./events */ \"./src/events.ts\");\r\nvar lut_1 = __webpack_require__(/*! ./lut */ \"./src/lut.ts\");\r\nvar vector_1 = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\r\nvar Object2D = (function (_super) {\r\n    __extends(Object2D, _super);\r\n    function Object2D(x, y) {\r\n        var _this = _super.call(this) || this;\r\n        _this.angle = 360;\r\n        _this.velocity = new vector_1.Vector(0, 0);\r\n        _this._xmin = 0;\r\n        _this._xmax = 0;\r\n        _this._ymin = 0;\r\n        _this._ymax = 0;\r\n        _this._width = 0;\r\n        _this._height = 0;\r\n        _this._score = 0;\r\n        _this.origin = new vector_1.Vector(x, y);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(Object2D.prototype, \"score\", {\r\n        get: function () {\r\n            return this._score;\r\n        },\r\n        set: function (value) {\r\n            this._score = value;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Object2D.prototype, \"points\", {\r\n        get: function () {\r\n            return this._points;\r\n        },\r\n        set: function (points) {\r\n            points.forEach(function (p) {\r\n                p.x *= screen_1.default.objectScale;\r\n                p.y *= screen_1.default.objectScale;\r\n            });\r\n            this._points = points;\r\n            this.calcBounds();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object2D.prototype.calcBounds = function () {\r\n        var _this = this;\r\n        this._points.forEach(function (p) {\r\n            if (p.x < _this._xmin)\r\n                _this._xmin = p.x;\r\n            if (p.x > _this._xmax)\r\n                _this._xmax = p.x;\r\n            if (p.y < _this._ymin)\r\n                _this._ymin = p.y;\r\n            if (p.y > _this._ymax)\r\n                _this._ymax = p.y;\r\n        });\r\n        this._width = this._xmax - this._xmin;\r\n        this._height = this._ymax - this._ymin;\r\n    };\r\n    Object2D.prototype.rotate = function (angle) {\r\n        this.angle += angle;\r\n        if (this.angle < 1) {\r\n            this.angle += 360;\r\n        }\r\n        if (this.angle > 360) {\r\n            this.angle -= 360;\r\n        }\r\n        var c = lut_1.COS[angle];\r\n        var s = lut_1.SIN[angle];\r\n        this.points.forEach(function (p) {\r\n            var newX = (c * p.x) - (s * p.y);\r\n            var newY = (s * p.x) + (c * p.y);\r\n            p.x = newX;\r\n            p.y = newY;\r\n        });\r\n        this.calcBounds();\r\n    };\r\n    Object2D.prototype.move = function (dt) {\r\n        dt = dt ? dt : 1;\r\n        this.origin.x += this.velocity.x * dt;\r\n        this.origin.y += this.velocity.y * dt;\r\n        if (this.origin.x > screen_1.default.width) {\r\n            this.origin.x -= screen_1.default.width;\r\n        }\r\n        if (this.origin.x < 0) {\r\n            this.origin.x += screen_1.default.width;\r\n        }\r\n        if (this.origin.y > screen_1.default.height) {\r\n            this.origin.y -= screen_1.default.height;\r\n        }\r\n        if (this.origin.y < 0) {\r\n            this.origin.y += screen_1.default.height;\r\n        }\r\n    };\r\n    Object2D.prototype.scale = function (factor) {\r\n        this.points.forEach(function (point) {\r\n            point.x *= factor;\r\n            point.y *= factor;\r\n        });\r\n        this.calcBounds();\r\n    };\r\n    Object2D.prototype.draw = function (closed, color) {\r\n        if (closed === void 0) { closed = true; }\r\n        if (color === void 0) { color = 'rgba(255,255,255,.8)'; }\r\n        screen_1.default.draw.vectorShape(this.points, this.origin.x, this.origin.y, color, closed);\r\n    };\r\n    Object.defineProperty(Object2D.prototype, \"x\", {\r\n        get: function () {\r\n            return this.origin.x + this._xmin;\r\n        },\r\n        set: function (x) {\r\n            this.origin.x = x;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Object2D.prototype, \"y\", {\r\n        get: function () {\r\n            return this.origin.y + this._ymin;\r\n        },\r\n        set: function (y) {\r\n            this.origin.y = y;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Object2D.prototype, \"width\", {\r\n        get: function () {\r\n            return this._width;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Object2D.prototype, \"height\", {\r\n        get: function () {\r\n            return this._height;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Object2D.prototype, \"vertices\", {\r\n        get: function () {\r\n            var _this = this;\r\n            return this.points.map(function (p) {\r\n                return {\r\n                    x: _this.origin.x + p.x,\r\n                    y: _this.origin.y + p.y\r\n                };\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object2D.prototype.collided = function (rect2) {\r\n        if (rect2 && this.x < rect2.x + rect2.width &&\r\n            this.x + this.width > rect2.x &&\r\n            this.y < rect2.y + rect2.height &&\r\n            this.height + this.y > rect2.y) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    Object2D.prototype.destroy = function () {\r\n        for (var event_1 in this.handlers) {\r\n            this.handlers[event_1] = null;\r\n        }\r\n        this.handlers = {};\r\n    };\r\n    return Object2D;\r\n}(events_1.EventSource));\r\nexports.Object2D = Object2D;\r\n\n\n//# sourceURL=webpack://asteroids/./src/object2d.ts?");

/***/ }),

/***/ "./src/quadtree.ts":
/*!*************************!*\
  !*** ./src/quadtree.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Quadtree = void 0;\r\nvar Quadtree = (function () {\r\n    function Quadtree(bounds, maxObjects, maxLevels, level) {\r\n        if (maxObjects === void 0) { maxObjects = 10; }\r\n        if (maxLevels === void 0) { maxLevels = 4; }\r\n        if (level === void 0) { level = 0; }\r\n        this.bounds = bounds;\r\n        this.maxObjects = maxObjects;\r\n        this.maxLevels = maxLevels;\r\n        this.level = level;\r\n        this.objects = [];\r\n        this.nodes = [];\r\n        this.width2 = this.bounds.width / 2;\r\n        this.height2 = this.bounds.height / 2;\r\n        this.xmid = this.bounds.x + this.width2;\r\n        this.ymid = this.bounds.y + this.height2;\r\n    }\r\n    Quadtree.prototype.insert = function (rect) {\r\n        var _this = this;\r\n        if (!rect) {\r\n            return;\r\n        }\r\n        var i = 0;\r\n        var indices;\r\n        if (this.nodes.length) {\r\n            indices = this.getIndex(rect);\r\n            if (indices.length) {\r\n                indices.forEach(function (i) {\r\n                    _this.nodes[i].insert(rect);\r\n                });\r\n                return;\r\n            }\r\n        }\r\n        this.objects.push(rect);\r\n        if (this.objects.length > this.maxObjects && this.level < this.maxLevels) {\r\n            if (!this.nodes.length) {\r\n                this.split();\r\n            }\r\n            var _loop_1 = function () {\r\n                indices = this_1.getIndex(this_1.objects[i]);\r\n                if (indices.length) {\r\n                    var object_1 = this_1.objects.splice(i, 1)[0];\r\n                    indices.forEach(function (n) {\r\n                        _this.nodes[n].insert(object_1);\r\n                    });\r\n                }\r\n                else {\r\n                    i = i + 1;\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            while (i < this.objects.length) {\r\n                _loop_1();\r\n            }\r\n        }\r\n    };\r\n    Quadtree.prototype.retrieve = function (rect) {\r\n        var _this = this;\r\n        if (!rect) {\r\n            return [];\r\n        }\r\n        var indices = this.getIndex(rect);\r\n        var result = this.objects;\r\n        if (this.nodes.length) {\r\n            if (indices.length) {\r\n                indices.forEach(function (i) {\r\n                    result = result.concat(_this.nodes[i].retrieve(rect));\r\n                });\r\n            }\r\n            else {\r\n                for (var i = 0; i < this.nodes.length; i++) {\r\n                    result = result.concat(this.nodes[i].retrieve(rect));\r\n                }\r\n            }\r\n        }\r\n        return result.filter(function (x, n, a) { return a.indexOf(x) === n; });\r\n    };\r\n    ;\r\n    Quadtree.prototype.clear = function () {\r\n        this.objects = [];\r\n        for (var i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i]) {\r\n                this.nodes[i].clear();\r\n            }\r\n        }\r\n        this.nodes = [];\r\n    };\r\n    ;\r\n    Quadtree.prototype.getIndex = function (rect) {\r\n        if (!rect) {\r\n            return [];\r\n        }\r\n        var results = [];\r\n        var _a = this, xmid = _a.xmid, ymid = _a.ymid;\r\n        var top = (rect.y <= ymid);\r\n        var bottom = (rect.y > ymid);\r\n        if (rect.x <= xmid) {\r\n            if (top) {\r\n                results.push(1);\r\n                var zero = false;\r\n                if (rect.x + rect.width > xmid) {\r\n                    results.push(0);\r\n                    zero = true;\r\n                }\r\n                if (rect.y + rect.height > ymid) {\r\n                    results.push(2);\r\n                    if (zero) {\r\n                        results.push(3);\r\n                    }\r\n                }\r\n            }\r\n            else if (bottom) {\r\n                results.push(2);\r\n                if (rect.x + rect.width > xmid) {\r\n                    results.push(3);\r\n                }\r\n            }\r\n        }\r\n        else if (rect.x > xmid) {\r\n            if (top) {\r\n                results.push(0);\r\n                if (rect.y + rect.height > ymid) {\r\n                    results.push(3);\r\n                }\r\n            }\r\n            else {\r\n                results.push(3);\r\n            }\r\n        }\r\n        return results;\r\n    };\r\n    ;\r\n    Quadtree.prototype.split = function () {\r\n        var _this = this;\r\n        var width = Math.round(this.width2);\r\n        var height = Math.round(this.height2);\r\n        var x = Math.round(this.bounds.x);\r\n        var y = Math.round(this.bounds.y);\r\n        var create = function (x, y) {\r\n            var bounds = {\r\n                x: x,\r\n                y: y,\r\n                width: width,\r\n                height: height\r\n            };\r\n            return new Quadtree(bounds, _this.maxObjects, _this.maxLevels, _this.level + 1);\r\n        };\r\n        this.nodes = [create(x + width, y), create(x, y), create(x, y + height), create(x + width, y + height)];\r\n    };\r\n    ;\r\n    return Quadtree;\r\n}());\r\nexports.Quadtree = Quadtree;\r\n\n\n//# sourceURL=webpack://asteroids/./src/quadtree.ts?");

/***/ }),

/***/ "./src/rocks.ts":
/*!**********************!*\
  !*** ./src/rocks.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Rock = exports.RockSize = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar object2d_1 = __webpack_require__(/*! ./object2d */ \"./src/object2d.ts\");\r\nvar vector_1 = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar sounds_1 = __webpack_require__(/*! ./sounds */ \"./src/sounds.ts\");\r\nvar RockSize;\r\n(function (RockSize) {\r\n    RockSize[RockSize[\"Small\"] = 5] = \"Small\";\r\n    RockSize[RockSize[\"Medium\"] = 10] = \"Medium\";\r\n    RockSize[RockSize[\"Large\"] = 20] = \"Large\";\r\n})(RockSize = exports.RockSize || (exports.RockSize = {}));\r\nvar Rock = (function (_super) {\r\n    __extends(Rock, _super);\r\n    function Rock(x, y, v, size, speed) {\r\n        if (speed === void 0) { speed = 1; }\r\n        var _this = _super.call(this, x, y) || this;\r\n        _this.rotTimer = 0;\r\n        _this.rock1 = [\r\n            [.5, -2],\r\n            [2, -1],\r\n            [2, -.7],\r\n            [1.2, 0],\r\n            [2, 1],\r\n            [1, 2],\r\n            [.5, 1.5],\r\n            [-1, 2],\r\n            [-2, .7],\r\n            [-2, -1],\r\n            [-.5, -1],\r\n            [-1, -2]\r\n        ];\r\n        _this.rock2 = [\r\n            [0, -1.5],\r\n            [1, -2],\r\n            [2, -1],\r\n            [1, -.5],\r\n            [2, .5],\r\n            [1, 2],\r\n            [-.5, 1.5],\r\n            [-1, 2],\r\n            [-2, 1],\r\n            [-1.5, 0],\r\n            [-2, -1],\r\n            [-1, -2]\r\n        ];\r\n        _this.rock3 = [\r\n            [0, -1],\r\n            [1, -2],\r\n            [2, -1],\r\n            [1.5, 0],\r\n            [2, 1],\r\n            [1, 2],\r\n            [-1, 2],\r\n            [-2, 1],\r\n            [-2, -1],\r\n            [-1, -2]\r\n        ];\r\n        _this.rocks = [_this.rock1, _this.rock2, _this.rock3];\r\n        var velocity = speed * screen_1.default.objectScale;\r\n        _this.velocity.x = v.x * velocity;\r\n        _this.velocity.y = v.y * velocity;\r\n        var type = (0, util_1.random)(0, 2);\r\n        var def = _this.rocks[type];\r\n        _this.points = def.map(function (p) {\r\n            return {\r\n                x: p[0] * size,\r\n                y: p[1] * size\r\n            };\r\n        });\r\n        _this.size = size;\r\n        _this.rotate((0, util_1.random)(1, 90));\r\n        _this.rot = (0, util_1.random)(.01, 1) % 2 === 0 ? 1 : -1;\r\n        _this.timeToRot = (0, util_1.random)(1, 5);\r\n        return _this;\r\n    }\r\n    Rock.prototype.update = function (dt) {\r\n        this.rotTimer += 1;\r\n        this.move(dt);\r\n        if (this.rotTimer === this.timeToRot) {\r\n            this.rotate(this.rot);\r\n            this.rotTimer = 0;\r\n        }\r\n    };\r\n    Rock.prototype.render = function () {\r\n        this.draw();\r\n    };\r\n    Object.defineProperty(Rock.prototype, \"direction\", {\r\n        get: function () {\r\n            var radians = Math.atan2(this.velocity.y, this.velocity.x);\r\n            var degrees = radians * (180 / Math.PI);\r\n            degrees = degrees > 0.0 ? degrees : 360 + degrees;\r\n            return Math.floor(degrees);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Rock.prototype.split = function () {\r\n        var sound;\r\n        switch (this.size) {\r\n            case RockSize.Large:\r\n                sound = sounds_1.largeExplosion;\r\n                break;\r\n            case RockSize.Medium:\r\n                sound = sounds_1.mediumExplosion;\r\n                break;\r\n            case RockSize.Small:\r\n                sound = sounds_1.smallExplosion;\r\n                break;\r\n        }\r\n        var rate = (0, util_1.randomFloat)(.7, 1);\r\n        sound.rate(rate);\r\n        sound.play();\r\n        if (this.size > RockSize.Small) {\r\n            var angle1 = (0, util_1.random)(this.direction, this.direction + 80);\r\n            var angle2 = (0, util_1.random)(this.direction - 80, this.direction);\r\n            if (angle1 < 0) {\r\n                angle1 += 360;\r\n            }\r\n            if (angle1 > 360) {\r\n                angle1 -= 360;\r\n            }\r\n            if (angle2 < 0) {\r\n                angle2 += 360;\r\n            }\r\n            if (angle2 > 360) {\r\n                angle2 -= 360;\r\n            }\r\n            var size = this.size === RockSize.Large ? RockSize.Medium : RockSize.Small;\r\n            var v1 = vector_1.Vector.fromAngle(angle1);\r\n            var v2 = vector_1.Vector.fromAngle(angle2);\r\n            var speed1 = size === RockSize.Medium ? (0, util_1.random)(150, 250) : (0, util_1.random)(250, 350);\r\n            var speed2 = size === RockSize.Medium ? (0, util_1.random)(150, 250) : (0, util_1.random)(250, 350);\r\n            var rock1 = new Rock(this.origin.x, this.origin.y, v1, size, speed1);\r\n            var rock2 = new Rock(this.origin.x, this.origin.y, v2, size, speed2);\r\n            return [rock1, rock2];\r\n        }\r\n        return [];\r\n    };\r\n    Object.defineProperty(Rock.prototype, \"score\", {\r\n        get: function () {\r\n            return this.size === RockSize.Large ? 20 : this.size === RockSize.Medium ? 50 : 100;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Rock;\r\n}(object2d_1.Object2D));\r\nexports.Rock = Rock;\r\n\n\n//# sourceURL=webpack://asteroids/./src/rocks.ts?");

/***/ }),

/***/ "./src/scoreMarker.ts":
/*!****************************!*\
  !*** ./src/scoreMarker.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ScoreMarker = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar draw_1 = __webpack_require__(/*! ./draw */ \"./src/draw.ts\");\r\nvar object2d_1 = __webpack_require__(/*! ./object2d */ \"./src/object2d.ts\");\r\nvar ScoreMarker = (function (_super) {\r\n    __extends(ScoreMarker, _super);\r\n    function ScoreMarker(obj, text) {\r\n        var _this = _super.call(this, obj.origin.x, obj.origin.y) || this;\r\n        _this.text = text;\r\n        _this.life = 1;\r\n        _this.velocity = obj.velocity;\r\n        return _this;\r\n    }\r\n    ScoreMarker.prototype.render = function () {\r\n        this.draw();\r\n    };\r\n    ScoreMarker.prototype.update = function (dt) {\r\n        this.move(dt);\r\n        this.life -= dt;\r\n        if (this.life <= 0) {\r\n            this.destroy();\r\n        }\r\n    };\r\n    ScoreMarker.prototype.draw = function () {\r\n        screen_1.default.draw.text(this.text, this.origin.x, this.origin.y, this.life * 50, (0, draw_1.white)(this.life));\r\n    };\r\n    ScoreMarker.prototype.destroy = function () {\r\n        this.life = 0;\r\n        this.trigger('expired');\r\n    };\r\n    return ScoreMarker;\r\n}(object2d_1.Object2D));\r\nexports.ScoreMarker = ScoreMarker;\r\n\n\n//# sourceURL=webpack://asteroids/./src/scoreMarker.ts?");

/***/ }),

/***/ "./src/screen.ts":
/*!***********************!*\
  !*** ./src/screen.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Screen = void 0;\r\nvar draw_1 = __webpack_require__(/*! ./draw */ \"./src/draw.ts\");\r\nvar Screen = (function () {\r\n    function Screen() {\r\n        var _this = this;\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.canvas = document.getElementById('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.draw = new draw_1.Draw(this.ctx);\r\n        this.init();\r\n        window.addEventListener('resize', function () {\r\n            _this.init();\r\n        });\r\n    }\r\n    Screen.prototype.init = function () {\r\n        this.canvas.width = document.body.clientWidth;\r\n        this.canvas.height = document.body.clientHeight;\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.width2 = this.width / 2;\r\n        this.height2 = this.height / 2;\r\n        if (this.width >= 1280) {\r\n            this._fontXL = 60;\r\n            this._fontL = 30;\r\n            this._fontM = 24;\r\n            this._fontS = 12;\r\n            this._objectScale = 1;\r\n        }\r\n        else if (this.width >= 800) {\r\n            this._fontXL = 48;\r\n            this._fontL = 24;\r\n            this._fontM = 18;\r\n            this._fontS = 10;\r\n            this._objectScale = .75;\r\n        }\r\n        else {\r\n            this._fontXL = 36;\r\n            this._fontL = 12;\r\n            this._fontM = 10;\r\n            this._fontS = 6;\r\n            this._objectScale = .5;\r\n        }\r\n        this._pointSize = 4 * this._objectScale;\r\n        var offRect = (120 * this._objectScale);\r\n        this._shipRect = {\r\n            x: this.width2 - offRect,\r\n            y: this.height2 - offRect,\r\n            width: offRect * 2,\r\n            height: offRect * 2\r\n        };\r\n    };\r\n    Object.defineProperty(Screen.prototype, \"font\", {\r\n        get: function () {\r\n            var self = this;\r\n            return {\r\n                get xlarge() {\r\n                    return self._fontXL;\r\n                },\r\n                get large() {\r\n                    return self._fontL;\r\n                },\r\n                get medium() {\r\n                    return self._fontM;\r\n                },\r\n                get small() {\r\n                    return self._fontS;\r\n                }\r\n            };\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Screen.prototype, \"objectScale\", {\r\n        get: function () {\r\n            return this._objectScale;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Screen.prototype, \"pointSize\", {\r\n        get: function () {\r\n            return this._pointSize;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Screen.prototype, \"shipRect\", {\r\n        get: function () {\r\n            return this._shipRect;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Screen.prototype.preShake = function () {\r\n        this.ctx.save();\r\n        var dx = Math.random() * 10;\r\n        var dy = Math.random() * 10;\r\n        this.ctx.translate(dx, dy);\r\n    };\r\n    Screen.prototype.postShake = function () {\r\n        this.ctx.restore();\r\n    };\r\n    return Screen;\r\n}());\r\nexports.Screen = Screen;\r\nexports[\"default\"] = new Screen();\r\n\n\n//# sourceURL=webpack://asteroids/./src/screen.ts?");

/***/ }),

/***/ "./src/ship.ts":
/*!*********************!*\
  !*** ./src/ship.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Ship = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar keys_1 = __webpack_require__(/*! ./keys */ \"./src/keys.ts\");\r\nvar object2d_1 = __webpack_require__(/*! ./object2d */ \"./src/object2d.ts\");\r\nvar vector_1 = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\r\nvar bullet_1 = __webpack_require__(/*! ./bullet */ \"./src/bullet.ts\");\r\nvar sounds_1 = __webpack_require__(/*! ./sounds */ \"./src/sounds.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar ACCELERATION = 0.1;\r\nvar BULLET_SPEED = 1000 * screen_1.default.objectScale;\r\nvar BULLET_TIME = .1;\r\nvar FRICTION = 0.005;\r\nvar ROTATION = 5;\r\nvar MAX_ACCELERATION = 1100 * screen_1.default.objectScale;\r\nvar MAX_BULLETS = 10;\r\nvar VELOCITY = 150 * screen_1.default.objectScale;\r\nvar Flame = (function (_super) {\r\n    __extends(Flame, _super);\r\n    function Flame(x, y) {\r\n        var _this = _super.call(this, x, y) || this;\r\n        _this.points = [\r\n            { x: 5, y: 8 },\r\n            { x: 0, y: 20 },\r\n            { x: -5, y: 8 },\r\n        ];\r\n        return _this;\r\n    }\r\n    Flame.prototype.update = function () {\r\n    };\r\n    Flame.prototype.render = function () {\r\n        this.draw(false);\r\n    };\r\n    return Flame;\r\n}(object2d_1.Object2D));\r\nvar Ship = (function (_super) {\r\n    __extends(Ship, _super);\r\n    function Ship(x, y) {\r\n        var _this = _super.call(this, x, y) || this;\r\n        _this.moving = false;\r\n        _this.rotating = false;\r\n        _this.bulletCount = 0;\r\n        _this.bulletTimer = 0;\r\n        _this.shield = 1;\r\n        _this.trails = [];\r\n        _this.flame = new Flame(x, y);\r\n        _this.points = [\r\n            { x: 0, y: -15 },\r\n            { x: 10, y: 10 },\r\n            { x: 5, y: 5 },\r\n            { x: -5, y: 5 },\r\n            { x: -10, y: 10 }\r\n        ];\r\n        _this.angle = 270;\r\n        return _this;\r\n    }\r\n    Ship.prototype.render = function () {\r\n        this.draw();\r\n        if (this.moving && (0, util_1.random)(1, 10) % 2 === 0) {\r\n            this.flame.draw(false);\r\n        }\r\n        if (this.trails.length) {\r\n            this.trails.forEach(function (trail) {\r\n                if (trail.alpha > 0) {\r\n                    screen_1.default.draw.shape(trail.points, trail.x, trail.y, \"rgba(255,0,255,\".concat(trail.alpha, \")\"), true);\r\n                    screen_1.default.draw.shape(trail.points, trail.x - 1, trail.y - 1, \"rgba(0,255,255,\".concat(trail.alpha, \")\"), true);\r\n                    trail.alpha -= .1;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Ship.prototype.update = function (dt) {\r\n        this.move(dt);\r\n        this.flame.move(dt);\r\n        if (keys_1.Key.isThrust()) {\r\n            this.moving = true;\r\n            this.thrust();\r\n        }\r\n        else {\r\n            this.moving = false;\r\n        }\r\n        if (keys_1.Key.wasRotateLeft) {\r\n            this.rotate(-1);\r\n        }\r\n        if (keys_1.Key.isRotateLeft()) {\r\n            this.rotate(-ROTATION);\r\n        }\r\n        if (keys_1.Key.wasRotateRight) {\r\n            this.rotate(1);\r\n        }\r\n        if (keys_1.Key.isRotateRight()) {\r\n            this.rotate(ROTATION);\r\n        }\r\n        this.rotating = keys_1.Key.isRotateLeft() || keys_1.Key.isRotateRight();\r\n        if (keys_1.Key.isFire()) {\r\n            this.fire();\r\n        }\r\n        if (keys_1.Key.wasHyperspace()) {\r\n            this.hyperspace();\r\n        }\r\n        if (this.bulletTimer >= 0) {\r\n            this.bulletTimer -= dt;\r\n        }\r\n        if (this.moving && (Math.abs(this.velocity.x) > 200 || Math.abs(this.velocity.y) > 200)) {\r\n            this.trails.push({\r\n                points: __spreadArray([], this.points, true),\r\n                x: this.origin.x,\r\n                y: this.origin.y,\r\n                alpha: .5\r\n            });\r\n        }\r\n        else {\r\n            this.trails.length = 0;\r\n        }\r\n        if (!this.moving) {\r\n            this.velocity.friction(FRICTION);\r\n            this.flame.velocity = this.velocity;\r\n        }\r\n    };\r\n    Ship.prototype.rotate = function (n) {\r\n        _super.prototype.rotate.call(this, n);\r\n        this.flame.rotate(n);\r\n    };\r\n    Ship.prototype.thrust = function () {\r\n        var v = vector_1.Vector.fromAngle(this.angle, VELOCITY * ACCELERATION);\r\n        if (this.velocity.magnitude < MAX_ACCELERATION) {\r\n            this.velocity.add(v);\r\n            this.flame.velocity = this.velocity;\r\n        }\r\n        sounds_1.thrust.play();\r\n    };\r\n    Ship.prototype.fire = function () {\r\n        var _this = this;\r\n        if (this.bulletTimer <= 0 && this.bulletCount < MAX_BULLETS) {\r\n            sounds_1.fire.play();\r\n            this.bulletTimer = BULLET_TIME;\r\n            this.bulletCount++;\r\n            var velocity = vector_1.Vector.fromAngle(this.angle);\r\n            var bullet = new bullet_1.Bullet(this.origin, velocity, 1);\r\n            bullet.on('expired', function () {\r\n                _this.bulletCount--;\r\n            });\r\n            var bv = bullet.velocity.copy();\r\n            bv.scale(20, 20);\r\n            bullet.origin.add(bv);\r\n            var speed = 0;\r\n            var dot = this.velocity.dot(bullet.velocity);\r\n            if (dot > 0) {\r\n                speed = this.velocity.magnitude;\r\n            }\r\n            speed = Math.max(BULLET_SPEED, speed + BULLET_SPEED);\r\n            bullet.velocity.scale(speed, speed);\r\n            var kba = (this.angle + 180) % 360;\r\n            var kbv = vector_1.Vector.fromAngle(kba, 5);\r\n            this.origin.add(kbv);\r\n            this.flame.origin.add(kbv);\r\n            this.trigger('fire', bullet);\r\n        }\r\n    };\r\n    Ship.prototype.hyperspace = function () {\r\n        var x = (0, util_1.random)(40, screen_1.default.width - 40);\r\n        var y = (0, util_1.random)(40, screen_1.default.height - 40);\r\n        this.velocity = new vector_1.Vector(0, 0);\r\n        this.flame.velocity = this.velocity;\r\n        this.x = this.flame.x = x;\r\n        this.y = this.flame.y = y;\r\n    };\r\n    Ship.prototype.destroy = function () {\r\n        this.trigger('expired');\r\n    };\r\n    return Ship;\r\n}(object2d_1.Object2D));\r\nexports.Ship = Ship;\r\n\n\n//# sourceURL=webpack://asteroids/./src/ship.ts?");

/***/ }),

/***/ "./src/shockwave.ts":
/*!**************************!*\
  !*** ./src/shockwave.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Shockwave = void 0;\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar object2d_1 = __webpack_require__(/*! ./object2d */ \"./src/object2d.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar Shockwave = (function (_super) {\r\n    __extends(Shockwave, _super);\r\n    function Shockwave(x, y, velocity, size, multiplier) {\r\n        if (multiplier === void 0) { multiplier = 1; }\r\n        var _this = _super.call(this, x, y) || this;\r\n        _this.velocity = velocity;\r\n        _this.size = size;\r\n        _this.multiplier = multiplier;\r\n        _this.life = 1;\r\n        _this.frame = 0;\r\n        _this.radius = 1;\r\n        _this.rocks = [];\r\n        return _this;\r\n    }\r\n    Shockwave.prototype.update = function (dt) {\r\n        this.frame++;\r\n        this.radius = this.size * (this.frame / 10);\r\n        this.life -= dt;\r\n        this.origin.x += this.velocity.x * dt;\r\n        this.origin.y += this.velocity.y * dt;\r\n        if (this.life <= .1) {\r\n            this.rocks.length = 0;\r\n            this.trigger('expired');\r\n        }\r\n    };\r\n    Shockwave.prototype.render = function (dt) {\r\n        if (this.frame === 1) {\r\n            var radius = (this.size * ((0, util_1.random)(25, 55))) / 10;\r\n            var ctx = screen_1.default.ctx;\r\n            ctx.beginPath();\r\n            ctx.arc(this.origin.x, this.origin.y, radius, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = \"rgba(255, 255, 255, \".concat((0, util_1.random)(.2, .5), \")\");\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.closePath();\r\n            screen_1.default.draw.scanlines();\r\n        }\r\n        screen_1.default.draw.circle(this.origin.x, this.origin.y, this.radius, \"rgba(128,128,128,\".concat(.5 - (this.frame / 100), \")\"));\r\n    };\r\n    Object.defineProperty(Shockwave.prototype, \"x\", {\r\n        get: function () {\r\n            return this.origin.x - this.radius;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Shockwave.prototype, \"y\", {\r\n        get: function () {\r\n            return this.origin.y - this.radius;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Shockwave.prototype, \"width\", {\r\n        get: function () {\r\n            return this.radius * 2;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Shockwave.prototype, \"height\", {\r\n        get: function () {\r\n            return this.radius * 2;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Shockwave;\r\n}(object2d_1.Object2D));\r\nexports.Shockwave = Shockwave;\r\n\n\n//# sourceURL=webpack://asteroids/./src/shockwave.ts?");

/***/ }),

/***/ "./src/sounds.ts":
/*!***********************!*\
  !*** ./src/sounds.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Sound = exports.getPowerup = exports.powerup = exports.extraLife = exports.thumpHi = exports.thumpLo = exports.smallAlien = exports.largeAlien = exports.smallExplosion = exports.mediumExplosion = exports.largeExplosion = exports.alienFire = exports.thrust = exports.fire = exports.all = void 0;\r\nvar howler_1 = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\r\nvar VOLUME = .5;\r\nvar soundOn = true;\r\nexports.all = [];\r\nfunction createSound(options) {\r\n    var count = 0;\r\n    var sound = new howler_1.Howl(options);\r\n    sound.on('end', function () {\r\n        if (options.max) {\r\n            count--;\r\n        }\r\n    });\r\n    var play = sound.play.bind(sound);\r\n    var canPlay = options.max ? count < options.max && soundOn : soundOn;\r\n    sound.play = function () {\r\n        if (soundOn) {\r\n            if (options.max) {\r\n                if (count < options.max) {\r\n                    play();\r\n                    count++;\r\n                }\r\n            }\r\n            else {\r\n                play();\r\n            }\r\n        }\r\n    };\r\n    sound._origVolume = options.volume;\r\n    exports.all.push(sound);\r\n    return sound;\r\n}\r\nexports.fire = createSound({\r\n    src: ['./assets/fire.wav'],\r\n    volume: .2\r\n});\r\nexports.thrust = createSound({\r\n    src: ['./assets/thrust.wav'],\r\n    volume: 0.3\r\n});\r\nexports.alienFire = createSound({\r\n    src: ['./assets/sfire.wav'],\r\n    volume: VOLUME\r\n});\r\nexports.largeExplosion = createSound({\r\n    src: ['./assets/explode1.wav'],\r\n    volume: VOLUME,\r\n    max: 2\r\n});\r\nexports.mediumExplosion = createSound({\r\n    src: ['./assets/explode2.wav'],\r\n    volume: VOLUME,\r\n    max: 2\r\n});\r\nexports.smallExplosion = createSound({\r\n    src: ['./assets/explode3.wav'],\r\n    volume: VOLUME,\r\n    max: 2\r\n});\r\nexports.largeAlien = createSound({\r\n    src: ['./assets/lsaucer.wav'],\r\n    volume: VOLUME,\r\n    loop: true\r\n});\r\nexports.smallAlien = createSound({\r\n    src: ['./assets/ssaucer.wav'],\r\n    volume: VOLUME,\r\n    loop: true\r\n});\r\nexports.thumpLo = createSound({\r\n    src: ['./assets/thumplo.wav'],\r\n    volume: .3\r\n});\r\nexports.thumpHi = createSound({\r\n    src: ['./assets/thumphi.wav'],\r\n    volume: .3\r\n});\r\nexports.extraLife = createSound({\r\n    src: ['./assets/life.wav'],\r\n    volume: .5\r\n});\r\nexports.powerup = createSound({\r\n    src: ['./assets/powerup.wav'],\r\n    volume: .5\r\n});\r\nexports.getPowerup = createSound({\r\n    src: ['./assets/getpowerup.wav'],\r\n    volume: .5\r\n});\r\nexports.Sound = {\r\n    on: function () {\r\n        soundOn = true;\r\n        exports.all.forEach(function (sound) { return sound.volume(sound._origVolume); });\r\n    },\r\n    off: function () {\r\n        soundOn = false;\r\n        exports.all.forEach(function (sound) { return sound.volume(0); });\r\n    },\r\n    stop: function () {\r\n        exports.all.forEach(function (sound) { return sound.stop(); });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://asteroids/./src/sounds.ts?");

/***/ }),

/***/ "./src/thump.ts":
/*!**********************!*\
  !*** ./src/thump.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Thumper = void 0;\r\nvar sounds_1 = __webpack_require__(/*! ./sounds */ \"./src/sounds.ts\");\r\nvar MIN = .15;\r\nvar MAX_VOL = 1;\r\nvar Thumper = (function () {\r\n    function Thumper() {\r\n        this.lo = true;\r\n        this.reset();\r\n    }\r\n    Thumper.prototype.reset = function () {\r\n        this.thumpBeatTimer = 0;\r\n        this.thumpBeat = 1;\r\n        this.thumpTimer = 0;\r\n        this.thumpTime = 10;\r\n        this.max = false;\r\n    };\r\n    Thumper.prototype.update = function (dt) {\r\n        this.thumpTimer += dt;\r\n        this.thumpBeatTimer += dt;\r\n        this.thumpBeat -= .0002;\r\n        if (this.thumpBeat <= MIN) {\r\n            this.thumpBeat = MIN;\r\n        }\r\n        if (this.thumpBeatTimer >= this.thumpBeat) {\r\n            if (this.lo) {\r\n                sounds_1.thumpLo.play();\r\n            }\r\n            else {\r\n                sounds_1.thumpHi.play();\r\n            }\r\n            this.lo = !this.lo;\r\n            this.thumpBeatTimer = 0;\r\n        }\r\n    };\r\n    return Thumper;\r\n}());\r\nexports.Thumper = Thumper;\r\n\n\n//# sourceURL=webpack://asteroids/./src/thump.ts?");

/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.randomFloat = exports.random = void 0;\r\nfunction random(start, end) {\r\n    return Math.floor(Math.random() * (end - start + 1)) + start;\r\n}\r\nexports.random = random;\r\nfunction randomFloat(start, end) {\r\n    return Math.random() * (end - start) + start;\r\n}\r\nexports.randomFloat = randomFloat;\r\n\n\n//# sourceURL=webpack://asteroids/./src/util.ts?");

/***/ }),

/***/ "./src/vector.ts":
/*!***********************!*\
  !*** ./src/vector.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Vector = void 0;\r\nvar VECTOR = {};\r\nvar PI2 = 2 * Math.PI;\r\nfor (var i = 0; i <= 360; i++) {\r\n    var t = PI2 * (i / 360);\r\n    VECTOR[i] = {\r\n        x: Math.cos(t),\r\n        y: Math.sin(t)\r\n    };\r\n}\r\nvar Vector = (function () {\r\n    function Vector(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    Vector.fromAngle = function (angleInDegrees, velocity) {\r\n        if (velocity === void 0) { velocity = 1; }\r\n        var x = VECTOR[angleInDegrees].x * velocity;\r\n        var y = VECTOR[angleInDegrees].y * velocity;\r\n        return new Vector(x, y);\r\n    };\r\n    Vector.fromXY = function (p1, p2, velocity) {\r\n        if (velocity === void 0) { velocity = 1; }\r\n        var x = p1.x - p2.x;\r\n        var y = p1.y - p2.y;\r\n        var hyp = Math.sqrt(x * x + y * y);\r\n        x /= hyp;\r\n        y /= hyp;\r\n        return new Vector(x * velocity, y * velocity);\r\n    };\r\n    Vector.prototype.add = function (v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n    };\r\n    Vector.prototype.copy = function () {\r\n        return new Vector(this.x, this.y);\r\n    };\r\n    Vector.prototype.dot = function (v) {\r\n        return (this.x * v.x) + (this.y * v.y);\r\n    };\r\n    Vector.prototype.friction = function (amount) {\r\n        this.x -= this.x * amount;\r\n        this.y -= this.y * amount;\r\n    };\r\n    Vector.prototype.scale = function (xscale, yscale) {\r\n        this.x *= xscale;\r\n        this.y *= yscale;\r\n    };\r\n    Object.defineProperty(Vector.prototype, \"magnitude\", {\r\n        get: function () {\r\n            return Math.sqrt((this.x * this.x) + (this.y * this.y));\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Vector;\r\n}());\r\nexports.Vector = Vector;\r\n\n\n//# sourceURL=webpack://asteroids/./src/vector.ts?");

/***/ }),

/***/ "./src/world.ts":
/*!**********************!*\
  !*** ./src/world.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.World = void 0;\r\nvar ship_1 = __webpack_require__(/*! ./ship */ \"./src/ship.ts\");\r\nvar alien_1 = __webpack_require__(/*! ./alien */ \"./src/alien.ts\");\r\nvar explosion_1 = __webpack_require__(/*! ./explosion */ \"./src/explosion.ts\");\r\nvar shockwave_1 = __webpack_require__(/*! ./shockwave */ \"./src/shockwave.ts\");\r\nvar flash_1 = __webpack_require__(/*! ./flash */ \"./src/flash.ts\");\r\nvar rocks_1 = __webpack_require__(/*! ./rocks */ \"./src/rocks.ts\");\r\nvar scoreMarker_1 = __webpack_require__(/*! ./scoreMarker */ \"./src/scoreMarker.ts\");\r\nvar vector_1 = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\r\nvar util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\r\nvar screen_1 = __webpack_require__(/*! ./screen */ \"./src/screen.ts\");\r\nvar sounds_1 = __webpack_require__(/*! ./sounds */ \"./src/sounds.ts\");\r\nvar EXTRA_LIFE = 10000;\r\nvar SHAKE_TIME = .5;\r\nvar DRAMATIC_PAUSE_TIME = 5;\r\nvar World = (function () {\r\n    function World(highscore) {\r\n        this.level = 7;\r\n        this.extraLifeScore = 0;\r\n        this.score = 0;\r\n        this.lives = 3;\r\n        this.shipBullets = [];\r\n        this.alienBullets = [];\r\n        this.shockwaves = [];\r\n        this.rocks = [];\r\n        this.scenery = [];\r\n        this.shipTimer = 0;\r\n        this.alienTimer = 0;\r\n        this.levelTimer = 0;\r\n        this.gameOverTimer = 0;\r\n        this.shakeTimer = 0;\r\n        this.powerupTimer = 0;\r\n        this.dramticPauseTimer = 0;\r\n        this.gameOver = false;\r\n        this.started = false;\r\n        this.highscore = highscore;\r\n    }\r\n    Object.defineProperty(World.prototype, \"objects\", {\r\n        get: function () {\r\n            return __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([this.ship, this.alien, this.powerup], this.shipBullets, true), this.alienBullets, true), this.rocks, true), this.shockwaves, true), this.scenery, true);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    World.prototype.update = function (dt) {\r\n        if (this.dramticPauseTimer > 0) {\r\n            this.dramticPauseTimer--;\r\n            return;\r\n        }\r\n        if (this.shakeTimer > 0) {\r\n            this.shakeTimer -= dt;\r\n        }\r\n        if (!this.powerup) {\r\n            this.powerupTimer += dt;\r\n        }\r\n        this.objects.forEach(function (obj) {\r\n            if (obj) {\r\n                obj.update(dt);\r\n            }\r\n        });\r\n    };\r\n    World.prototype.render = function (delta) {\r\n        if (this.shakeTimer > 0) {\r\n            screen_1.default.preShake();\r\n        }\r\n        this.objects.forEach(function (obj) {\r\n            if (obj) {\r\n                obj.render(delta);\r\n            }\r\n        });\r\n        if (this.shakeTimer > 0) {\r\n            screen_1.default.postShake();\r\n        }\r\n    };\r\n    World.prototype.startLevel = function () {\r\n        this.level++;\r\n        this.levelTimer = 0;\r\n        this.powerupTimer = 0;\r\n        if (!this.alienTimer) {\r\n            this.alienTimer = (0, util_1.random)(10, 15);\r\n        }\r\n        this.scenery.length = 0;\r\n        this.shipBullets.forEach(function (bullet) { return bullet.destroy(); });\r\n        this.addRocks();\r\n    };\r\n    World.prototype.addRocks = function () {\r\n        var count = Math.min(this.level + 3, 10);\r\n        var speed = 150;\r\n        var offset = 20;\r\n        for (var i = 0; i < count; i++) {\r\n            var zone = (0, util_1.random)(1, 4);\r\n            var v = vector_1.Vector.fromAngle((0, util_1.random)(1, 360));\r\n            var x = void 0;\r\n            var y = void 0;\r\n            switch (zone) {\r\n                case 1:\r\n                    x = (0, util_1.random)(offset, screen_1.default.width - offset);\r\n                    y = (0, util_1.random)(offset, offset * 2);\r\n                    break;\r\n                case 2:\r\n                    x = (0, util_1.random)(screen_1.default.width - (offset * 2), screen_1.default.width - offset);\r\n                    y = (0, util_1.random)(screen_1.default.height - offset, screen_1.default.height - offset);\r\n                    break;\r\n                case 3:\r\n                    x = (0, util_1.random)(offset, screen_1.default.width - offset);\r\n                    y = (0, util_1.random)(screen_1.default.height - offset, screen_1.default.height - offset);\r\n                    break;\r\n                default:\r\n                    x = (0, util_1.random)(offset, offset * 2);\r\n                    y = (0, util_1.random)(screen_1.default.height - offset, screen_1.default.height - offset);\r\n                    break;\r\n            }\r\n            var rock = new rocks_1.Rock(x, y, v, rocks_1.RockSize.Large, speed);\r\n            this.rocks.push(rock);\r\n        }\r\n    };\r\n    World.prototype.addShip = function (x, y) {\r\n        var _this = this;\r\n        this.ship = new ship_1.Ship(x, y);\r\n        this.ship.on('fire', function (ship, bullet) {\r\n            bullet.on('expired', function () {\r\n                _this.shipBullets = _this.shipBullets.filter(function (x) { return x !== bullet; });\r\n            });\r\n            _this.shipBullets.push(bullet);\r\n        });\r\n        this.ship.on('expired', function () {\r\n            _this.lives--;\r\n            _this.ship = null;\r\n            _this.shipBullets.length = 0;\r\n        });\r\n    };\r\n    World.prototype.createExplosion = function (obj, size, multiplier) {\r\n        var _this = this;\r\n        if (size === void 0) { size = 100; }\r\n        if (multiplier === void 0) { multiplier = 1; }\r\n        if (!obj) {\r\n            return;\r\n        }\r\n        var explosion = new explosion_1.Explosion(obj.origin.x, obj.origin.y, size);\r\n        this.addScenery(explosion);\r\n        var shockwave = new shockwave_1.Shockwave(obj.origin.x, obj.origin.y, obj.velocity, size, multiplier);\r\n        shockwave.on('expired', function () {\r\n            _this.shockwaves = _this.shockwaves.filter(function (x) { return x !== shockwave; });\r\n        });\r\n        this.shockwaves.push(shockwave);\r\n        return {\r\n            explosion: explosion,\r\n            shockwave: shockwave\r\n        };\r\n    };\r\n    World.prototype.shipDestroyed = function () {\r\n        if (this.ship) {\r\n            sounds_1.largeExplosion.play();\r\n            this.createExplosion(this.ship);\r\n            this.addFlash(5);\r\n            this.ship.destroy();\r\n        }\r\n    };\r\n    World.prototype.alienDestroyed = function () {\r\n        if (this.alien) {\r\n            this.addFlash(5);\r\n            this.createExplosion(this.alien);\r\n            this.alien.destroy();\r\n        }\r\n    };\r\n    World.prototype.addFlash = function (frames) {\r\n        var flash = new flash_1.Flash(frames);\r\n        this.addScenery(flash);\r\n    };\r\n    World.prototype.addScenery = function (obj) {\r\n        var _this = this;\r\n        obj.on('expired', function () {\r\n            _this.scenery = _this.scenery.filter(function (x) { return x !== obj; });\r\n        });\r\n        this.scenery.push(obj);\r\n    };\r\n    World.prototype.rockDestroyed = function (rock, multiplier) {\r\n        var _a;\r\n        if (multiplier === void 0) { multiplier = 1; }\r\n        var boom = this.createExplosion(rock, rock.size * 5, multiplier);\r\n        var debris = rock.split();\r\n        this.rocks = this.rocks.filter(function (x) { return x !== rock; });\r\n        (_a = this.rocks).push.apply(_a, debris);\r\n        this.shockwaves.forEach(function (shockwave) {\r\n            shockwave.rocks = shockwave.rocks.filter(function (x) { return x !== rock; });\r\n        });\r\n        boom.shockwave.rocks = debris;\r\n        rock = null;\r\n    };\r\n    World.prototype.addAlien = function () {\r\n        var _this = this;\r\n        var lvl = Math.min(this.level, 14);\r\n        var little = false;\r\n        var alienSound = sounds_1.largeAlien;\r\n        if (this.score >= 40000) {\r\n            little = true;\r\n        }\r\n        else {\r\n            switch (lvl) {\r\n                case 7:\r\n                    little = this.levelTimer > 60 && (0, util_1.random)(1, 3) === 2;\r\n                    break;\r\n                case 8:\r\n                    little = this.levelTimer > 30 && (0, util_1.random)(1, 10) % 2 === 0;\r\n                    break;\r\n                default:\r\n                    little = (0, util_1.random)(1, 10) <= lvl + 2;\r\n                    break;\r\n            }\r\n        }\r\n        if (little) {\r\n            alienSound = sounds_1.smallAlien;\r\n            this.alien = new alien_1.SmallAlien(this.ship);\r\n        }\r\n        else {\r\n            this.alien = new alien_1.BigAlien();\r\n        }\r\n        alienSound.play();\r\n        this.alien.on('expired', function () {\r\n            sounds_1.alienFire.stop();\r\n            alienSound.stop();\r\n            sounds_1.largeExplosion.play();\r\n            _this.alien = null;\r\n            _this.alienBullets.forEach(function (b) { return b.destroy(); });\r\n            _this.alienBullets.length = 0;\r\n        });\r\n        this.alien.on('fire', function (alien, bullet) {\r\n            sounds_1.alienFire.play();\r\n            bullet.on('expired', function () {\r\n                _this.alienBullets = _this.alienBullets.filter(function (x) { return x !== bullet; });\r\n            });\r\n            _this.alienBullets.push(bullet);\r\n        });\r\n    };\r\n    World.prototype.addScore = function (obj) {\r\n        this.score += obj.score;\r\n        this.extraLifeScore += obj.score;\r\n        if (this.score > this.highscore) {\r\n            this.highscore = this.score;\r\n        }\r\n        if (this.extraLifeScore >= EXTRA_LIFE) {\r\n            this.lives++;\r\n            this.extraLifeScore -= EXTRA_LIFE;\r\n            sounds_1.extraLife.play();\r\n        }\r\n        var marker = new scoreMarker_1.ScoreMarker(obj, \"+\".concat(obj.score));\r\n        this.addScenery(marker);\r\n    };\r\n    World.prototype.addPowerup = function () {\r\n        sounds_1.getPowerup.play();\r\n    };\r\n    World.prototype.shake = function () {\r\n        if (this.shakeTimer <= 0.0) {\r\n            this.shakeTimer = SHAKE_TIME;\r\n        }\r\n    };\r\n    World.prototype.tryPlaceShip = function (dt) {\r\n        this.shipTimer += dt;\r\n        if (this.shipTimer <= 2) {\r\n            return;\r\n        }\r\n        var rect = screen_1.default.shipRect;\r\n        var collided = false;\r\n        this.rocks.forEach(function (rock) {\r\n            collided = collided || rock.collided(rect);\r\n        });\r\n        if (this.alien) {\r\n            collided = collided || this.alien.collided(rect);\r\n        }\r\n        if (!collided) {\r\n            this.shipTimer = 0;\r\n            this.addShip(screen_1.default.width2, screen_1.default.height2);\r\n        }\r\n    };\r\n    World.prototype.updateAlienTimer = function (dt) {\r\n        var level = Math.min(this.level, 7);\r\n        if (!this.alien) {\r\n            this.alienTimer -= dt;\r\n            if (this.alienTimer <= 0) {\r\n                this.addAlien();\r\n                this.alienTimer = (0, util_1.random)(10, 15);\r\n            }\r\n        }\r\n    };\r\n    World.prototype.shouldTryToPlaceShip = function () {\r\n        return !!this.shipTimer || (!this.ship && !!this.lives);\r\n    };\r\n    World.prototype.shouldCheckForNextLevel = function () {\r\n        return !this.rocks.length && !!this.lives;\r\n    };\r\n    World.prototype.shouldCheckCollisions = function () {\r\n        return !!this.ship || !!this.shipBullets.length;\r\n    };\r\n    return World;\r\n}());\r\nexports.World = World;\r\n\n\n//# sourceURL=webpack://asteroids/./src/world.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/asteroids.ts");
/******/ 	
/******/ })()
;